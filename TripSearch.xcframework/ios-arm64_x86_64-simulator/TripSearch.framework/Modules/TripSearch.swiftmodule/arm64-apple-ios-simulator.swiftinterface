// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TripSearch
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import CoreImage
import CoreLocation
import CoreMIDI
import DeveloperToolsSupport
import FSCalendar
import FirebaseAnalytics
import Foundation
import PassKit
import PhoneNumberKit
import SDWebImage
import SkeletonView
import Stripe
import StripeCore
import StripePaymentSheet
import Swift
import SwiftUI
import SystemConfiguration
@_exported import TripSearch
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct OfferAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var expiresAt: Foundation.Date
  public init(expiresAt: Foundation.Date)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case expiresAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferAllOfAttributes, b: TripSearch.OfferAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferPriceQuoteAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var offer: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer
  public var options: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions
  public init(offer: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer, options: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case offer
    case options
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferPriceQuoteAllOfRelationships, b: TripSearch.TripOfferPriceQuoteAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionDetailsAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var details: TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails?
  public var cabinClass: TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass?
  public var legType: TripSearch.TripBookingDetailsAllOfRelationshipsLegType?
  public init(details: TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails, cabinClass: TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass, legType: TripSearch.TripBookingDetailsAllOfRelationshipsLegType?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case details
    case cabinClass
    case legType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionDetailsAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetailsAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionDetailsAllOfRelationships, b: TripSearch.TripOfferOptionDetailsAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetUsersGroups200Response : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.UserGroup>
  public init(data: Swift.Set<TripSearch.UserGroup>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetUsersGroups200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetUsersGroups200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetUsersGroups200Response, b: TripSearch.GetUsersGroups200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferGroupAllOfRelationshipsOptions : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OfferOptionIdentifier]
  public init(data: [TripSearch.OfferOptionIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferGroupAllOfRelationshipsOptions.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupAllOfRelationshipsOptions.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroupAllOfRelationshipsOptions, b: TripSearch.OfferGroupAllOfRelationshipsOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Journey : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case journeys
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Journey.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Journey.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.Journey.ModelType
  public var attributes: TripSearch.JourneyAllOfAttributes
  public var relationships: TripSearch.JourneyAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.Journey.ModelType, attributes: TripSearch.JourneyAllOfAttributes, relationships: TripSearch.JourneyAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Journey.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Journey.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Journey, b: TripSearch.Journey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferOptionIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offerOptions
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferOptionIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOptionIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferOptionIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.OfferOptionIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferOptionIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOptionIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferOptionIdentifier, b: TripSearch.OfferOptionIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum NullEncodable<Wrapped> : Swift.Hashable where Wrapped : Swift.Hashable {
  case encodeNothing
  case encodeNull
  case encodeValue(Wrapped)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.NullEncodable<Wrapped>, b: TripSearch.NullEncodable<Wrapped>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension TripSearch.NullEncodable : Swift.Codable where Wrapped : Swift.Decodable, Wrapped : Swift.Encodable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ErrorResponse : Swift.Error {
  case error(Swift.Int, Foundation.Data?, Foundation.URLResponse?, any Swift.Error)
}
public enum DownloadException : Swift.Error {
  case responseDataMissing
  case responseFailed
  case requestMissing
  case requestMissingPath
  case requestMissingURL
  public static func == (a: TripSearch.DownloadException, b: TripSearch.DownloadException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DecodableRequestBuilderError : Swift.Error {
  case emptyDataResponse
  case nilHTTPResponse
  case unsuccessfulHTTPStatusCode
  case jsonDecoding(Swift.DecodingError)
  case generalError(any Swift.Error)
}
open class Response<T> {
  final public let statusCode: Swift.Int
  final public let header: [Swift.String : Swift.String]
  final public let body: T
  public init(statusCode: Swift.Int, header: [Swift.String : Swift.String], body: T)
  convenience public init(response: Foundation.HTTPURLResponse, body: T)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RequestTask {
  final public func cancel()
  @objc deinit
}
public struct BooleanCollectionItem : Swift.Codable, Swift.Hashable {
  public var title: Swift.String?
  public var ref: Swift.String
  public var value: Swift.Bool
  public var imageUrl: Swift.String?
  public init(title: Swift.String? = nil, ref: Swift.String, value: Swift.Bool, imageUrl: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.BooleanCollectionItem, b: TripSearch.BooleanCollectionItem) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferPriceQuoteAllOfAttributes : Swift.Codable, Swift.Hashable {
  public enum Required : Swift.String, Swift.Codable, Swift.CaseIterable {
    case dateOfBirth
    case nationality
    case expirationDate
    case issuingCountry
    case passportNumber
    case residenceCountryCode
    case unknownValue
    public init(from decoder: any Swift.Decoder) throws
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteAllOfAttributes.Required]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteAllOfAttributes.Required] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case unspecified
    case pending
    case processing
    case completed
    case failed
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteAllOfAttributes.Status]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteAllOfAttributes.Status] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var expiresAt: Foundation.Date?
  public var price: TripSearch.Price?
  public var penalties: [TripSearch.TripOfferOptionPenalty]?
  public var _required: [TripSearch.TripOfferPriceQuoteAllOfAttributes.Required]?
  public var rules: [TripSearch.OfferSegmentDetailRule]?
  public var status: TripSearch.TripOfferPriceQuoteAllOfAttributes.Status?
  public var sessionToken: Swift.String?
  public init(expiresAt: Foundation.Date? = nil, price: TripSearch.Price? = nil, penalties: [TripSearch.TripOfferOptionPenalty]? = nil, _required: [TripSearch.TripOfferPriceQuoteAllOfAttributes.Required]? = nil, rules: [TripSearch.OfferSegmentDetailRule]? = nil, status: TripSearch.TripOfferPriceQuoteAllOfAttributes.Status? = nil, sessionToken: Swift.String?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case expiresAt
    case price
    case penalties
    case _required
    case rules
    case status
    case sessionToken
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferPriceQuoteAllOfAttributes, b: TripSearch.TripOfferPriceQuoteAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func addKeyboardDismissGesture(to targetView: UIKit.UIView? = nil)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func finishEditing(_ completion: @escaping () -> Swift.Void)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func present(animated: Swift.Bool = true)
}
public struct GetPlaces200Response : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.Place]
  public init(data: [TripSearch.Place])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetPlaces200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetPlaces200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetPlaces200Response, b: TripSearch.GetPlaces200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferGroupAllOfRelationshipsDetails : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OfferGroupAllOfRelationshipsDetailsDataOneOf]?
  public init(data: [TripSearch.OfferGroupAllOfRelationshipsDetailsDataOneOf]?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferGroupAllOfRelationshipsDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupAllOfRelationshipsDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroupAllOfRelationshipsDetails, b: TripSearch.OfferGroupAllOfRelationshipsDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTripsSearchesIdTrips200ResponseAllOf : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.Trip>?
  public init(data: Swift.Set<TripSearch.Trip>? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf, b: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingDetailsIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripBookingDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripBookingDetailsIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripBookingDetailsIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.TripBookingDetailsIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetailsIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetailsIdentifier, b: TripSearch.TripBookingDetailsIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceAttributes : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public var latitude: Swift.Float
  public var longitude: Swift.Float
  public var countryCode: Swift.String
  public var countryName: Swift.String?
  public var timeZone: Swift.String
  public var iataCode: Swift.String?
  public init(name: Swift.String, latitude: Swift.Float, longitude: Swift.Float, countryCode: Swift.String, countryName: Swift.String? = nil, timeZone: Swift.String, iataCode: Swift.String?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    case latitude
    case longitude
    case countryCode
    case countryName
    case timeZone
    case iataCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PlaceAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PlaceAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PlaceAttributes, b: TripSearch.PlaceAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GuestSessionRelationshipsGuest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.GuestSessionRelationshipsGuestData
  public init(data: TripSearch.GuestSessionRelationshipsGuestData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GuestSessionRelationshipsGuest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GuestSessionRelationshipsGuest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GuestSessionRelationshipsGuest, b: TripSearch.GuestSessionRelationshipsGuest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSearchAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripSearches
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripSearchAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearchAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripSearchAllOf.ModelType
  public var attributes: TripSearch.TripSearchAllOfAttributes
  public var relationships: TripSearch.TripSearchAllOfRelationships
  public init(id: Swift.String, type: TripSearch.TripSearchAllOf.ModelType, attributes: TripSearch.TripSearchAllOfAttributes, relationships: TripSearch.TripSearchAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripSearchAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearchAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearchAllOf, b: TripSearch.TripSearchAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerificationCode : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case verificationCodes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.VerificationCode.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.VerificationCode.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: TripSearch.VerificationCode.ModelType
  public var attributes: TripSearch.VerificationCodeAttributes
  public init(type: TripSearch.VerificationCode.ModelType, attributes: TripSearch.VerificationCodeAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.VerificationCode.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.VerificationCode.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.VerificationCode, b: TripSearch.VerificationCode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSearchAllOfRelationshipsOrigin : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.PlaceIdentifier
  public init(data: TripSearch.PlaceIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripSearchAllOfRelationshipsOrigin.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearchAllOfRelationshipsOrigin.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearchAllOfRelationshipsOrigin, b: TripSearch.TripSearchAllOfRelationshipsOrigin) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GuestSessionRelationships : Swift.Codable, Swift.Hashable {
  public var guest: TripSearch.GuestSessionRelationshipsGuest
  public init(guest: TripSearch.GuestSessionRelationshipsGuest)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case guest
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GuestSessionRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GuestSessionRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GuestSessionRelationships, b: TripSearch.GuestSessionRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Offer : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offers
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Offer.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Offer.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.Offer.ModelType
  public var attributes: TripSearch.OfferAllOfAttributes
  public var relationships: TripSearch.OfferAllOfRelationships
  public init(id: Swift.String, type: TripSearch.Offer.ModelType, attributes: TripSearch.OfferAllOfAttributes, relationships: TripSearch.OfferAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Offer.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Offer.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Offer, b: TripSearch.Offer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingDetailsAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripBookingDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripBookingDetailsAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripBookingDetailsAllOf.ModelType
  public var attributes: TripSearch.TripBookingDetailsAllOfAttributes
  public var relationships: TripSearch.TripBookingDetailsAllOfRelationships
  public init(id: Swift.String, type: TripSearch.TripBookingDetailsAllOf.ModelType, attributes: TripSearch.TripBookingDetailsAllOfAttributes, relationships: TripSearch.TripBookingDetailsAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetailsAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetailsAllOf, b: TripSearch.TripBookingDetailsAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class UserAPI {
  @discardableResult
  open class func deleteUsersMe(password: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func deleteUsersMeWithRequestBuilder(password: Swift.String) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func getUsersMe(apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.UserProfile?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getUsersMeWithRequestBuilder() -> TripSearch.RequestBuilder<TripSearch.UserProfile>
  @discardableResult
  open class func getVerificationCodeId(userEmail: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Result<TripSearch.Response<Swift.Void>, TripSearch.ErrorResponse>) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getVerificationCodeIdWithRequestBuilder(userEmail: Swift.String) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func patchUsersId(userEmail: Swift.String, patchUsersIdRequest: TripSearch.PatchUsersIdRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func patchUsersIdWithRequestBuilder(userEmail: Swift.String, patchUsersIdRequest: TripSearch.PatchUsersIdRequest) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func patchUsersMe(patchUsersMeRequest: TripSearch.PatchUsersMeRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.UserProfile?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func patchUsersMeWithRequestBuilder(patchUsersMeRequest: TripSearch.PatchUsersMeRequest) -> TripSearch.RequestBuilder<TripSearch.UserProfile>
  @discardableResult
  open class func postUsers(user: TripSearch.UserOwn, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Result<TripSearch.Response<Swift.Void>, TripSearch.ErrorResponse>) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postUsersWithRequestBuilder(user: TripSearch.UserOwn) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func postUsersSessions(postUsersSessionsRequest: TripSearch.PostUsersSessionsRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostUsersSessionsRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postUsersSessionsWithRequestBuilder(postUsersSessionsRequest: TripSearch.PostUsersSessionsRequest) -> TripSearch.RequestBuilder<TripSearch.PostUsersSessionsRequest>
  @discardableResult
  open class func postVerificationCode(postVerificationCodeRequest: TripSearch.PostVerificationCodeRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postVerificationCodeWithRequestBuilder(postVerificationCodeRequest: TripSearch.PostVerificationCodeRequest) -> TripSearch.RequestBuilder<Swift.Void>
  @objc deinit
}
extension TripSearch.TripBooking {
  public enum Status : Swift.String, Swift.Codable {
    case unspecified
    case pending
    case confirmed
    case rejected
    case notTicketed
    case error
    case timeout
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SegmentControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public var onValueChanged: ((_ index: Swift.Int) -> ())?
  @_Concurrency.MainActor(unsafe) public var selectedSegmentIndex: Swift.Int
  @_Concurrency.MainActor(unsafe) public var type: TripSearch.SegementType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectorType: TripSearch.SelectorType {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var buttonTitles: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var buttonImages: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var buttonImagesSelected: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var selectorTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var selectorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isRounded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bottomBarHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var normalFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var SelectedFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animate: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) open func updateView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func setViewLayout()
  @_Concurrency.MainActor(unsafe) open func setSelectedIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func changeSelectedColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Array {
  public subscript(safe index: Swift.Array<Element>.Index) -> Element? {
    get
  }
}
public enum SegementType : Swift.Int {
  case normal, imageOnTop, onlyImage
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SelectorType : Swift.Int {
  case normal, bottomBar
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct TripAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var segments: TripSearch.TripAllOfRelationshipsSegments
  public init(segments: TripSearch.TripAllOfRelationshipsSegments)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case segments
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripAllOfRelationships, b: TripSearch.TripAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOffersSearchesIdOffers200ResponseAllOf : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.Offer>
  public var included: [TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner]?
  public init(data: Swift.Set<TripSearch.Offer>, included: [TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    case included
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetOffersSearchesIdOffers200ResponseAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOffersSearchesIdOffers200ResponseAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOffersSearchesIdOffers200ResponseAllOf, b: TripSearch.GetOffersSearchesIdOffers200ResponseAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PatchUsersMePreferencesRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UpdatePreference
  public init(data: TripSearch.UpdatePreference)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PatchUsersMePreferencesRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PatchUsersMePreferencesRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PatchUsersMePreferencesRequest, b: TripSearch.PatchUsersMePreferencesRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case trips
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.TripIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripIdentifier, b: TripSearch.TripIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GuestSession : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case guestSessions
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.GuestSession.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GuestSession.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.GuestSession.ModelType
  public var relationships: TripSearch.GuestSessionRelationships
  public init(id: Swift.String? = nil, type: TripSearch.GuestSession.ModelType, relationships: TripSearch.GuestSessionRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GuestSession.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GuestSession.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GuestSession, b: TripSearch.GuestSession) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var groups: TripSearch.OfferAllOfRelationshipsGroups
  public init(groups: TripSearch.OfferAllOfRelationshipsGroups)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case groups
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferAllOfRelationships, b: TripSearch.OfferAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Point : Swift.Codable, Swift.Hashable {
  public var ref: Swift.String
  public var name: Swift.String
  public var latitude: Swift.Float
  public var longitude: Swift.Float
  public var timeZone: Swift.String
  public init(ref: Swift.String, name: Swift.String, latitude: Swift.Float, longitude: Swift.Float, timeZone: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case ref
    case name
    case latitude
    case longitude
    case timeZone
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Point.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Point.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Point, b: TripSearch.Point) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserGroupRelationshipsMembers : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.UserGroupMemberIdentifier>
  public init(data: Swift.Set<TripSearch.UserGroupMemberIdentifier>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroupRelationshipsMembers.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupRelationshipsMembers.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroupRelationshipsMembers, b: TripSearch.UserGroupRelationshipsMembers) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferGroupDetailsAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var legs: [TripSearch.OfferSegmentLeg]
  public var vendor: Swift.String
  public var _operator: Swift.String?
  public var routeIdentifiers: TripSearch.RouteIdentifiers
  public var sequences: TripSearch.TripOfferGroupDetailsAllOfAttributesSequences
  public init(legs: [TripSearch.OfferSegmentLeg], vendor: Swift.String, _operator: Swift.String?, routeIdentifiers: TripSearch.RouteIdentifiers, sequences: TripSearch.TripOfferGroupDetailsAllOfAttributesSequences)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case legs
    case vendor
    case _operator
    case routeIdentifiers
    case sequences
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferGroupDetailsAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetailsAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferGroupDetailsAllOfAttributes, b: TripSearch.TripOfferGroupDetailsAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferPriceQuoteAllOfRelationshipsOffer : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.OfferIdentifier
  public init(data: TripSearch.OfferIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer, b: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserGroupMemberAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case userGroupMembers
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserGroupMemberAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupMemberAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.UserGroupMemberAllOf.ModelType
  public init(id: Swift.String, type: TripSearch.UserGroupMemberAllOf.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroupMemberAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupMemberAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroupMemberAllOf, b: TripSearch.UserGroupMemberAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserProfileAttributes : Swift.Codable, Swift.Hashable {
  public enum Gender : Swift.String, Swift.Codable, Swift.CaseIterable {
    case female
    case male
    case unspecified
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserProfileAttributes.Gender]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileAttributes.Gender] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Title : Swift.String, Swift.Codable, Swift.CaseIterable {
    case mr
    case mrs
    case miss
    case ms
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserProfileAttributes.Title]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileAttributes.Title] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var gender: TripSearch.UserProfileAttributes.Gender?
  public var title: TripSearch.UserProfileAttributes.Title?
  public var countryCode: Swift.String?
  public var dateOfBirth: Swift.String?
  public var loyaltyPrograms: [TripSearch.LoyaltyProgramUserProfile]?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, gender: TripSearch.UserProfileAttributes.Gender? = nil, title: TripSearch.UserProfileAttributes.Title? = nil, countryCode: Swift.String? = nil, dateOfBirth: Swift.String? = nil, loyaltyPrograms: [TripSearch.LoyaltyProgramUserProfile]? = nil, createdAt: Foundation.Date? = nil, updatedAt: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case email
    case phone
    case gender
    case title
    case countryCode
    case dateOfBirth
    case loyaltyPrograms
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserProfileAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserProfileAttributes, b: TripSearch.UserProfileAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserGroupAttributes : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public init(name: Swift.String, createdAt: Foundation.Date? = nil, updatedAt: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroupAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroupAttributes, b: TripSearch.UserGroupAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOffersSearchesIdOffers200Response : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.Offer]
  public var included: [TripSearch.OfferSearchIncludedValue]?
  public init(data: [TripSearch.Offer], included: [TripSearch.OfferSearchIncludedValue]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    case included
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetOffersSearchesIdOffers200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOffersSearchesIdOffers200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOffersSearchesIdOffers200Response, b: TripSearch.GetOffersSearchesIdOffers200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenISO8601DateFormatter : Foundation.DateFormatter {
  @objc override dynamic public func date(from string: Swift.String) -> Foundation.Date?
  @objc deinit
}
extension Foundation.NSMutableAttributedString {
  @discardableResult
  public func setAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any], for text: Swift.String? = nil) -> Foundation.NSMutableAttributedString
  @discardableResult
  public func setColor(_ color: UIKit.UIColor, for text: Swift.String? = nil) -> Foundation.NSMutableAttributedString
  @discardableResult
  public func setFont(_ font: UIKit.UIFont, for text: Swift.String? = nil) -> Foundation.NSMutableAttributedString
}
extension Foundation.NSAttributedString {
  public static func fromHTMLString(_ htmlString: Swift.String, font: UIKit.UIFont? = nil, highlightedFont: UIKit.UIFont? = nil, highlightedSubstrings: [Swift.String] = [], stringColor: UIKit.UIColor? = nil) -> Foundation.NSAttributedString
}
public struct TripCandidateSearchAllOfAttributes : Swift.Codable, Swift.Hashable {
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case unspecified
    case pending
    case processing
    case completed
    case failed
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripCandidateSearchAllOfAttributes.Status]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripCandidateSearchAllOfAttributes.Status] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var expiresAt: Foundation.Date?
  public var status: TripSearch.TripCandidateSearchAllOfAttributes.Status?
  public var criteria: Swift.Set<TripSearch.TripCandidateSearchCriteria>
  public var sessionToken: Swift.String?
  public var passengers: [TripSearch.Passenger]
  public init(expiresAt: Foundation.Date? = nil, status: TripSearch.TripCandidateSearchAllOfAttributes.Status? = nil, criteria: Swift.Set<TripSearch.TripCandidateSearchCriteria>, sessionToken: Swift.String?, passengers: [TripSearch.Passenger])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripCandidateSearchAllOfAttributes, b: TripSearch.TripCandidateSearchAllOfAttributes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class IBDesignableButton : UIKit.UIButton, TripSearch.Roundable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var masksToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct PostUsersGroupsIdMembersRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UserGroupMember
  public init(data: TripSearch.UserGroupMember)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostUsersGroupsIdMembersRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostUsersGroupsIdMembersRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostUsersGroupsIdMembersRequest, b: TripSearch.PostUsersGroupsIdMembersRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionDetailsAllOfRelationshipsDetails : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.TripOfferGroupDetailsIdentifier
  public init(data: TripSearch.TripOfferGroupDetailsIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails, b: TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SelfLink : Swift.Codable, Swift.Hashable {
  public var links: TripSearch.SelfLinkLinks
  public init(links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.SelfLink.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.SelfLink.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.SelfLink, b: TripSearch.SelfLink) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserSessionAttributes : Swift.Codable, Swift.Hashable {
  public var password: Swift.String?
  public var email: Swift.String?
  public init(password: Swift.String?, email: Swift.String?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case password
    case email
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserSessionAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserSessionAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserSessionAttributes, b: TripSearch.UserSessionAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderCreatableRelationships : Swift.Codable, Swift.Hashable {
  public var payment: TripSearch.OrderCreatableAllOfRelationshipsPayment
  public var voucher: TripSearch.OrderCreatableAllOfRelationshipsVoucher?
  public var quote: TripSearch.OrderAllOfRelationshipsQuote
  public init(payment: TripSearch.OrderCreatableAllOfRelationshipsPayment, voucher: TripSearch.OrderCreatableAllOfRelationshipsVoucher? = nil, quote: TripSearch.OrderAllOfRelationshipsQuote)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderCreatableRelationships, b: TripSearch.OrderCreatableRelationships) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOfRelationshipsOptions : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.OfferOptionIdentifier>
  public init(data: Swift.Set<TripSearch.OfferOptionIdentifier>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOfRelationshipsOptions.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOfRelationshipsOptions.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfRelationshipsOptions, b: TripSearch.OrderAllOfRelationshipsOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct RecentSearchViewModel : Swift.Codable, Swift.Hashable {
  public init(originPlaceObject: TripSearch.Place, destinationPlaceObject: TripSearch.Place, datesStringObjectFrom: Swift.String, datesStringObjectTo: Swift.String, departureTimeStringObject: Swift.String, travelersCountDescriptionStringObject: Swift.String, classOfServiceStringObject: Swift.String, departureDate: Foundation.Date, travelersCount: TripSearch.TravelersCount, returnDate: Foundation.Date?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case originPlaceObject
    case destinationPlaceObject
    case datesStringObjectFrom
    case datesStringObjectTo
    case departureTimeStringObject
    case travelersCountDescriptionStringObject
    case classOfServiceStringObject
    case departureDate
    case returnDate
    case travelersCount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.RecentSearchViewModel.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.RecentSearchViewModel.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.RecentSearchViewModel, b: TripSearch.RecentSearchViewModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferOptionAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offerOptions
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferOptionAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOptionAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferOptionAllOf.ModelType
  public var attributes: TripSearch.OfferOptionAllOfAttributes
  public var relationships: TripSearch.OfferOptionAllOfRelationships
  public init(id: Swift.String, type: TripSearch.OfferOptionAllOf.ModelType, attributes: TripSearch.OfferOptionAllOfAttributes, relationships: TripSearch.OfferOptionAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferOptionAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOptionAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferOptionAllOf, b: TripSearch.OfferOptionAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBooking : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripBookings
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripBooking.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBooking.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripBooking.ModelType
  public var attributes: TripSearch.TripBookingAllOfAttributes
  public var relationships: TripSearch.TripBookingAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.TripBooking.ModelType, attributes: TripSearch.TripBookingAllOfAttributes, relationships: TripSearch.TripBookingAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBooking.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBooking.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBooking, b: TripSearch.TripBooking) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripBookings
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripBookingIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripBookingIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.TripBookingIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingIdentifier, b: TripSearch.TripBookingIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserGroupMemberAllOf1 : Swift.Codable, Swift.Hashable {
  public var attributes: TripSearch.UserProfileAttributes
  public init(attributes: TripSearch.UserProfileAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroupMemberAllOf1.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupMemberAllOf1.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroupMemberAllOf1, b: TripSearch.UserGroupMemberAllOf1) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case payments
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PaymentIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PaymentIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.PaymentIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.PaymentIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PaymentIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PaymentIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PaymentIdentifier, b: TripSearch.PaymentIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum PreferenceAttributesValue : Swift.Codable, Swift.Hashable {
  case typeBool(Swift.Bool)
  case typeInt(Swift.Int)
  case typeBooleanCollectionItem([TripSearch.BooleanCollectionItem])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PreferenceAttributesValue, b: TripSearch.PreferenceAttributesValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class GroupsAPI {
  @discardableResult
  open class func deleteUsersGroupsId(groupId: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func deleteUsersGroupsIdWithRequestBuilder(groupId: Swift.String) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func deleteUsersGroupsMembersId(memberId: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func deleteUsersGroupsMembersIdWithRequestBuilder(memberId: Swift.String) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func getUsersGroups(pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetUsersGroups200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getUsersGroupsWithRequestBuilder(pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil) -> TripSearch.RequestBuilder<TripSearch.GetUsersGroups200Response>
  @discardableResult
  open class func getUsersGroupsId(groupId: Foundation.UUID, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetUsersGroupsId200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getUsersGroupsIdWithRequestBuilder(groupId: Foundation.UUID) -> TripSearch.RequestBuilder<TripSearch.GetUsersGroupsId200Response>
  @discardableResult
  open class func getUsersGroupsIdMembers(groupId: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetUsersGroupsIdMembers200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getUsersGroupsIdMembersWithRequestBuilder(groupId: Swift.String) -> TripSearch.RequestBuilder<TripSearch.GetUsersGroupsIdMembers200Response>
  @discardableResult
  open class func patchUsersGroupsId(groupId: Foundation.UUID, postUsersGroupsRequest: TripSearch.PostUsersGroupsRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func patchUsersGroupsIdWithRequestBuilder(groupId: Foundation.UUID, postUsersGroupsRequest: TripSearch.PostUsersGroupsRequest) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func patchUsersGroupsMembersId(memberId: Swift.String, postUsersGroupsIdMembersRequest: TripSearch.PostUsersGroupsIdMembersRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func patchUsersGroupsMembersIdWithRequestBuilder(memberId: Swift.String, postUsersGroupsIdMembersRequest: TripSearch.PostUsersGroupsIdMembersRequest) -> TripSearch.RequestBuilder<Swift.Void>
  @discardableResult
  open class func postUsersGroups(postUsersGroupsRequest: TripSearch.PostUsersGroupsRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostUsersGroupsRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postUsersGroupsWithRequestBuilder(postUsersGroupsRequest: TripSearch.PostUsersGroupsRequest) -> TripSearch.RequestBuilder<TripSearch.PostUsersGroupsRequest>
  @discardableResult
  open class func postUsersGroupsIdMembers(groupId: Swift.String, postUsersGroupsIdMembersRequest: TripSearch.PostUsersGroupsIdMembersRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostUsersGroupsIdMembersRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postUsersGroupsIdMembersWithRequestBuilder(groupId: Swift.String, postUsersGroupsIdMembersRequest: TripSearch.PostUsersGroupsIdMembersRequest) -> TripSearch.RequestBuilder<TripSearch.PostUsersGroupsIdMembersRequest>
  @objc deinit
}
public struct TripOfferSearchAllOfRelationshipsTrips : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.TripIdentifier]
  public init(data: [TripSearch.TripIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferSearchAllOfRelationshipsTrips.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferSearchAllOfRelationshipsTrips.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferSearchAllOfRelationshipsTrips, b: TripSearch.TripOfferSearchAllOfRelationshipsTrips) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderPassenger : Swift.Codable, Swift.Hashable {
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var title: Swift.String
  public var gender: Swift.String
  public var dateOfBirth: Swift.String
  public var travelerDocument: TripSearch.OrderPassengerTravelerDocument?
  public init(firstName: Swift.String, lastName: Swift.String, title: Swift.String, gender: Swift.String, dateOfBirth: Swift.String, travelerDocument: TripSearch.OrderPassengerTravelerDocument? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case title
    case gender
    case dateOfBirth
    case travelerDocument
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderPassenger.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderPassenger.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderPassenger, b: TripSearch.OrderPassenger) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class TripsAPI {
  @discardableResult
  open class func getTripCandidatesSearchesId(tripCandidateSearchId: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostTripCandidatesSearchesRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getTripCandidatesSearchesIdWithRequestBuilder(tripCandidateSearchId: Swift.String) -> TripSearch.RequestBuilder<TripSearch.PostTripCandidatesSearchesRequest>
  public enum Include_getTripCandidatesSearchesIdOffers : Swift.String, Swift.CaseIterable {
    case groups
    case groupsPeriodDetails
    case groupsPeriodDetailsPeriodLegtype
    case groupsPeriodOptions
    case groupsPeriodOptionsPeriodDetails
    case groupsPeriodOptionsPeriodDetailsPeriodCabinclass
    case groupsPeriodOptionsPeriodDetailsPeriodDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripsAPI.Include_getTripCandidatesSearchesIdOffers]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripsAPI.Include_getTripCandidatesSearchesIdOffers] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Sort_getTripCandidatesSearchesIdOffers : Swift.String, Swift.CaseIterable {
    case id
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripsAPI.Sort_getTripCandidatesSearchesIdOffers]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripsAPI.Sort_getTripCandidatesSearchesIdOffers] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getTripCandidatesSearchesIdOffers(tripCandidateSearchId: Swift.String, sessionToken: Swift.String, include: [TripSearch.TripsAPI.Include_getTripCandidatesSearchesIdOffers]? = nil, sort: [TripSearch.TripsAPI.Sort_getTripCandidatesSearchesIdOffers]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, filterGroupsOptionsDetailsCabinClass: [Swift.String]? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetTripCandidatesSearchesIdOffers200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getTripCandidatesSearchesIdOffersWithRequestBuilder(tripCandidateSearchId: Swift.String, sessionToken: Swift.String, include: [TripSearch.TripsAPI.Include_getTripCandidatesSearchesIdOffers]? = nil, sort: [TripSearch.TripsAPI.Sort_getTripCandidatesSearchesIdOffers]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, filterGroupsOptionsDetailsCabinClass: [Swift.String]? = nil) -> TripSearch.RequestBuilder<TripSearch.GetTripCandidatesSearchesIdOffers200Response>
  public enum Include_getTripsSearchesIdTrips : Swift.String, Swift.CaseIterable {
    case segments
    case segmentsPeriodLegs
    case segmentsPeriodLegsPeriodLegtype
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripsAPI.Include_getTripsSearchesIdTrips]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripsAPI.Include_getTripsSearchesIdTrips] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getTripsSearchesIdTrips(tripSearchId: Swift.String, include: [TripSearch.TripsAPI.Include_getTripsSearchesIdTrips]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetTripsSearchesIdTrips200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getTripsSearchesIdTripsWithRequestBuilder(tripSearchId: Swift.String, include: [TripSearch.TripsAPI.Include_getTripsSearchesIdTrips]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil) -> TripSearch.RequestBuilder<TripSearch.GetTripsSearchesIdTrips200Response>
  @discardableResult
  open class func postTripCandidatesSearches(sessionToken: Swift.String, postTripCandidatesSearchesRequest: TripSearch.PostTripCandidatesSearchesRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostTripCandidatesSearchesRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postTripCandidatesSearchesWithRequestBuilder(sessionToken: Swift.String, postTripCandidatesSearchesRequest: TripSearch.PostTripCandidatesSearchesRequest) -> TripSearch.RequestBuilder<TripSearch.PostTripCandidatesSearchesRequest>
  @discardableResult
  open class func postTripsSearches(postTripsSearchesRequest: TripSearch.PostTripsSearchesRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostTripsSearchesRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postTripsSearchesWithRequestBuilder(postTripsSearchesRequest: TripSearch.PostTripsSearchesRequest) -> TripSearch.RequestBuilder<TripSearch.PostTripsSearchesRequest>
  @objc deinit
}
public struct ChangePasswordBody : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.ChangePasswordBodyData
  public init(data: TripSearch.ChangePasswordBodyData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ChangePasswordBody.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ChangePasswordBody.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ChangePasswordBody, b: TripSearch.ChangePasswordBody) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripAllOfRelationshipsSegments : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.SegmentIdentifier]
  public init(data: [TripSearch.SegmentIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripAllOfRelationshipsSegments.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripAllOfRelationshipsSegments.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripAllOfRelationshipsSegments, b: TripSearch.TripAllOfRelationshipsSegments) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplicableTo : Swift.Codable, Swift.Hashable {
  public var dateOfBirthAfter: Foundation.Date?
  public var dateOfBirthBefore: Foundation.Date?
  public init(dateOfBirthAfter: Foundation.Date?, dateOfBirthBefore: Foundation.Date?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case dateOfBirthAfter
    case dateOfBirthBefore
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ApplicableTo.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ApplicableTo.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ApplicableTo, b: TripSearch.ApplicableTo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class InternalAPI {
  @discardableResult
  open class func getHealth(apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetHealth200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getHealthWithRequestBuilder() -> TripSearch.RequestBuilder<TripSearch.GetHealth200Response>
  @objc deinit
}
public struct NextLinkLinks : Swift.Codable, Swift.Hashable {
  public var next: Swift.String
  public init(next: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case next
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.NextLinkLinks.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.NextLinkLinks.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.NextLinkLinks, b: TripSearch.NextLinkLinks) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DashedView : UIKit.UIView {
  public struct Configuration {
    public var color: UIKit.UIColor
    public var dashLength: CoreFoundation.CGFloat
    public var dashGap: CoreFoundation.CGFloat
    public init(color: UIKit.UIColor, dashLength: CoreFoundation.CGFloat, dashGap: CoreFoundation.CGFloat)
  }
  @_Concurrency.MainActor(unsafe) public class var lineHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var config: TripSearch.DashedView.Configuration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum OrderIncludedValue : Swift.Codable, Swift.Hashable {
  case typeJourney(TripSearch.Journey)
  case typeTripBookng(TripSearch.TripBooking)
  case typeTripBookngDetails(TripSearch.TripBookingDetails)
  case typeCabinClass(TripSearch.CabinClass)
  case typeLegType(TripSearch.LegType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderIncludedValue, b: TripSearch.OrderIncludedValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PostPayments200Response : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.PaymentIntent?
  public init(data: TripSearch.PaymentIntent? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostPayments200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostPayments200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostPayments200Response, b: TripSearch.PostPayments200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferOption : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offerOptions
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferOption.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOption.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferOption.ModelType
  public var attributes: TripSearch.OfferOptionAllOfAttributes
  public var relationships: TripSearch.OfferOptionAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.OfferOption.ModelType, attributes: TripSearch.OfferOptionAllOfAttributes, relationships: TripSearch.OfferOptionAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferOption.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOption.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferOption, b: TripSearch.OfferOption) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferGroupDetails : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferGroupDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferGroupDetails.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetails.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferGroupDetails.ModelType
  public var attributes: TripSearch.TripOfferGroupDetailsAllOfAttributes
  public var relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.TripOfferGroupDetails.ModelType, attributes: TripSearch.TripOfferGroupDetailsAllOfAttributes, relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferGroupDetails, b: TripSearch.TripOfferGroupDetails) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case orders
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OrderIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OrderIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.OrderIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderIdentifier, b: TripSearch.OrderIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOfRelationshipsOffer : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.OfferIdentifier
  public init(data: TripSearch.OfferIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOfRelationshipsOffer.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOfRelationshipsOffer.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfRelationshipsOffer, b: TripSearch.OrderAllOfRelationshipsOffer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LoyaltyCard : Swift.Codable, Swift.Hashable {
  public var airlineIata: Swift.String
  public var number: Swift.String
  public var firstName: Swift.String
  public var lastName: Swift.String
  public init(airlineIata: Swift.String, number: Swift.String, firstName: Swift.String, lastName: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case airlineIata
    case number
    case firstName
    case lastName
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LoyaltyCard.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LoyaltyCard.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LoyaltyCard, b: TripSearch.LoyaltyCard) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegTypeAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case legTypes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.LegTypeAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegTypeAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.LegTypeAllOf.ModelType
  public var attributes: TripSearch.LegTypeAllOfAttributes
  public init(id: Swift.String, type: TripSearch.LegTypeAllOf.ModelType, attributes: TripSearch.LegTypeAllOfAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LegTypeAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegTypeAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LegTypeAllOf, b: TripSearch.LegTypeAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOrders200Response : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.Order]
  public var included: [TripSearch.OrderIncludedValue]?
  public init(data: [TripSearch.Order], included: [TripSearch.OrderIncludedValue]? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOrders200Response, b: TripSearch.GetOrders200Response) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Dictionary {
  public func merge(with dict: [Key : Value]) -> [Key : Value]
  public mutating func update(with dict: [Key : Value])
}
public struct UserGroupMember : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case userGroupMembers
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserGroupMember.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupMember.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.UserGroupMember.ModelType
  public var attributes: TripSearch.UserProfileAttributes
  public init(id: Swift.String? = nil, type: TripSearch.UserGroupMember.ModelType, attributes: TripSearch.UserProfileAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroupMember.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupMember.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroupMember, b: TripSearch.UserGroupMember) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class Configuration {
  @available(*, unavailable, message: "To set a different date format, use CodableHelper.dateFormatter instead.")
  public static var dateFormat: Swift.String
  public static var successfulStatusCodeRange: Swift.Range<Swift.Int>
  public static var dataResponseSerializer: TripSearch.AnyResponseSerializer<Foundation.Data>
  public static var stringResponseSerializer: TripSearch.AnyResponseSerializer<Swift.String>
  @objc deinit
}
public struct AnyResponseSerializer<T> : Alamofire.ResponseSerializer {
  public init<V>(_ delegatee: V) where T == V.SerializedObject, V : Alamofire.ResponseSerializer
  public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> T
  public typealias SerializedObject = T
}
public struct Coordinates : Swift.Codable, Swift.Hashable {
  public var latitude: Swift.Float
  public var longitude: Swift.Float
  public init(latitude: Swift.Float, longitude: Swift.Float)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case latitude
    case longitude
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Coordinates.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Coordinates.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Coordinates, b: TripSearch.Coordinates) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserGroupMemberIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case userGroupMembers
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserGroupMemberIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupMemberIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Foundation.UUID
  public var type: TripSearch.UserGroupMemberIdentifier.ModelType
  public init(id: Foundation.UUID, type: TripSearch.UserGroupMemberIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroupMemberIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupMemberIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroupMemberIdentifier, b: TripSearch.UserGroupMemberIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class OffersAPI {
  @discardableResult
  open class func getOffersQuotesId(offerPriceQuoteId: Swift.String, sessionToken: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostOffersQuotesRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getOffersQuotesIdWithRequestBuilder(offerPriceQuoteId: Swift.String, sessionToken: Swift.String) -> TripSearch.RequestBuilder<TripSearch.PostOffersQuotesRequest>
  public enum Include_getOffersSearchesId : Swift.String, Swift.CaseIterable {
    case offers
    case offersPeriodGroups
    case offersPeriodGroupsPeriodDetails
    case offersPeriodGroupsPeriodDetailsPeriodLegtype
    case offersPeriodGroupsPeriodOptions
    case offersPeriodGroupsPeriodOptionsPeriodDetails
    case offersPeriodGroupsPeriodOptionsPeriodDetailsPeriodCabinclass
    case offersPeriodGroupsPeriodOptionsPeriodDetailsPeriodDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OffersAPI.Include_getOffersSearchesId]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OffersAPI.Include_getOffersSearchesId] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getOffersSearchesId(offerSearchId: Swift.String, include: [TripSearch.OffersAPI.Include_getOffersSearchesId]? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetOffersSearchesId200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getOffersSearchesIdWithRequestBuilder(offerSearchId: Swift.String, include: [TripSearch.OffersAPI.Include_getOffersSearchesId]? = nil) -> TripSearch.RequestBuilder<TripSearch.GetOffersSearchesId200Response>
  public enum Include_getOffersSearchesIdOffers : Swift.String, Swift.CaseIterable {
    case groups
    case groupsPeriodDetails
    case groupsPeriodDetailsPeriodLegtype
    case groupsPeriodOptions
    case groupsPeriodOptionsPeriodDetails
    case groupsPeriodOptionsPeriodDetailsPeriodCabinclass
    case groupsPeriodOptionsPeriodDetailsPeriodDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OffersAPI.Include_getOffersSearchesIdOffers]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OffersAPI.Include_getOffersSearchesIdOffers] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getOffersSearchesIdOffers(offerSearchId: Swift.String, sessionToken: Swift.String, include: [TripSearch.OffersAPI.Include_getOffersSearchesIdOffers]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, filterGroupsOptionsDetailsCabinClass: [Swift.String]? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetOffersSearchesIdOffers200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getOffersSearchesIdOffersWithRequestBuilder(offerSearchId: Swift.String, sessionToken: Swift.String, include: [TripSearch.OffersAPI.Include_getOffersSearchesIdOffers]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, filterGroupsOptionsDetailsCabinClass: [Swift.String]? = nil) -> TripSearch.RequestBuilder<TripSearch.GetOffersSearchesIdOffers200Response>
  @discardableResult
  open class func postOffersQuotes(sessionToken: Swift.String, postOffersQuotesRequest: TripSearch.PostOffersQuotesRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostOffersQuotesRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postOffersQuotesWithRequestBuilder(sessionToken: Swift.String? = nil, postOffersQuotesRequest: TripSearch.PostOffersQuotesRequest) -> TripSearch.RequestBuilder<TripSearch.PostOffersQuotesRequest>
  @discardableResult
  open class func postOffersSearches(sessionToken: Swift.String, postOffersSearchesRequest: TripSearch.PostOffersSearchesRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostOffersSearchesRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postOffersSearchesWithRequestBuilder(sessionToken: Swift.String, postOffersSearchesRequest: TripSearch.PostOffersSearchesRequest) -> TripSearch.RequestBuilder<TripSearch.PostOffersSearchesRequest>
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) final public class Router : ObjectiveC.NSObject, TripSearch.RouterType, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) final public var rootViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var hasRootController: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let navigationController: UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public init(navigationController: UIKit.UINavigationController)
  @_Concurrency.MainActor(unsafe) final public func thePresentable() -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) final public func present(_ module: any TripSearch.Presentable, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) final public func present(_ module: any TripSearch.Presentable, animated: Swift.Bool, presentationStyle: UIKit.UIModalPresentationStyle)
  @_Concurrency.MainActor(unsafe) final public func dismissModule(animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) final public func push(_ module: any TripSearch.Presentable, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) final public func popModel(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) final public func setRootModule(_ module: any TripSearch.Presentable, hideBar: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) final public func popToRootModule(animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc final public func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc deinit
}
public struct TravelersCount : Swift.Codable, Swift.Hashable {
  public init(adults: Swift.Int, children: Swift.Int, infants: Swift.Int)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case adults
    case children
    case infants
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TravelersCount.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TravelersCount.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TravelersCount, b: TripSearch.TravelersCount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferGroupAllOfAttributes : Swift.Codable, Swift.Hashable {
  public enum Required : Swift.String, Swift.Codable, Swift.CaseIterable {
    case dateOfBirth
    case nationality
    case expirationDate
    case issuingCountry
    case passportNumber
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferGroupAllOfAttributes.Required]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupAllOfAttributes.Required] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var _required: [TripSearch.OfferGroupAllOfAttributes.Required]?
  public init(_required: [TripSearch.OfferGroupAllOfAttributes.Required]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case _required
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferGroupAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroupAllOfAttributes, b: TripSearch.OfferGroupAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionPenaltyBaggageAllowance : Swift.Codable, Swift.Hashable {
  public var isIncluded: Swift.Bool
  public init(isIncluded: Swift.Bool)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case isIncluded
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionPenaltyBaggageAllowance.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionPenaltyBaggageAllowance.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionPenaltyBaggageAllowance, b: TripSearch.TripOfferOptionPenaltyBaggageAllowance) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
@IBDesignable @_Concurrency.MainActor(unsafe) open class AlphaSlider : UIKit.UISlider {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public struct UserUpdatableAttributes : Swift.Codable, Swift.Hashable {
  public var password: Swift.String
  public init(password: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case password
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserUpdatableAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserUpdatableAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserUpdatableAttributes, b: TripSearch.UserUpdatableAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostOffersQuotesRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.TripOfferPriceQuote
  public init(data: TripSearch.TripOfferPriceQuote)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostOffersQuotesRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostOffersQuotesRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostOffersQuotesRequest, b: TripSearch.PostOffersQuotesRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Roundable : AnyObject {
  var cornerRadius: CoreFoundation.CGFloat { get set }
  var masksToBounds: Swift.Bool { get set }
}
public protocol Borderable : AnyObject {
  var borderColor: UIKit.UIColor { get set }
  var borderWidth: CoreFoundation.CGFloat { get set }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class IBDesignableView : UIKit.UIView, TripSearch.Roundable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var masksToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct OfferSegmentDetailAmenities : Swift.Codable, Swift.Hashable {
  public var beverage: TripSearch.OfferSegmentDetailAmenity
  public var entertainment: TripSearch.OfferSegmentDetailAmenity
  public var food: TripSearch.OfferSegmentDetailAmenity
  public var power: TripSearch.OfferSegmentDetailAmenity
  public var wifi: TripSearch.OfferSegmentDetailAmenity
  public init(beverage: TripSearch.OfferSegmentDetailAmenity, entertainment: TripSearch.OfferSegmentDetailAmenity, food: TripSearch.OfferSegmentDetailAmenity, power: TripSearch.OfferSegmentDetailAmenity, wifi: TripSearch.OfferSegmentDetailAmenity)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case beverage
    case entertainment
    case food
    case power
    case wifi
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferSegmentDetailAmenities.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferSegmentDetailAmenities.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferSegmentDetailAmenities, b: TripSearch.OfferSegmentDetailAmenities) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostTripCandidatesSearchesRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.TripCandidateSearch
  public init(data: TripSearch.TripCandidateSearch)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostTripCandidatesSearchesRequest, b: TripSearch.PostTripCandidatesSearchesRequest) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RouterType : AnyObject, TripSearch.Presentable {
  var navigationController: UIKit.UINavigationController { get }
  var rootViewController: UIKit.UIViewController? { get }
  func present(_ module: any TripSearch.Presentable, animated: Swift.Bool)
  func present(_ module: any TripSearch.Presentable, animated: Swift.Bool, presentationStyle: UIKit.UIModalPresentationStyle)
  func push(_ module: any TripSearch.Presentable, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  func popModel(animated: Swift.Bool)
  func dismissModule(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  func setRootModule(_ module: any TripSearch.Presentable, hideBar: Swift.Bool)
  func popToRootModule(animated: Swift.Bool)
}
public struct JourneyAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var reference: Swift.String
  public var contactDetails: TripSearch.ContactDetails
  public init(reference: Swift.String, contactDetails: TripSearch.ContactDetails)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case reference
    case contactDetails
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.JourneyAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.JourneyAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.JourneyAllOfAttributes, b: TripSearch.JourneyAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum TripSearchIncludedValue : Swift.Codable, Swift.Hashable {
  case typeSegment(TripSearch.Segment)
  case typeLeg(TripSearch.Leg)
  case typeLegType(TripSearch.LegType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearchIncludedValue, b: TripSearch.TripSearchIncludedValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func mapValueToPathItem(_ source: Any) -> Any
  public static func mapValuesToQueryItems(_ source: [Swift.String : (wrappedValue: Any?, isExplode: Swift.Bool)]) -> [Foundation.URLQueryItem]?
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public struct PassengerTitle : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case passengerTitles
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PassengerTitle.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerTitle.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.PassengerTitle.ModelType
  public var attributes: TripSearch.PassengerTitleAllOfAttributes
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.PassengerTitle.ModelType, attributes: TripSearch.PassengerTitleAllOfAttributes, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PassengerTitle.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerTitle.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PassengerTitle, b: TripSearch.PassengerTitle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserUpdatable : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case users
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserUpdatable.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserUpdatable.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: TripSearch.UserUpdatable.ModelType
  public var attributes: TripSearch.UserUpdatableAttributes
  public init(type: TripSearch.UserUpdatable.ModelType, attributes: TripSearch.UserUpdatableAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserUpdatable.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserUpdatable.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserUpdatable, b: TripSearch.UserUpdatable) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case cabinClasses
    case offerGroups
    case tripOfferGroupDetails
    case legTypes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner.ModelType
  public var attributes: TripSearch.CabinClassAllOfAttributes
  public var relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String? = nil, type: TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner.ModelType, attributes: TripSearch.CabinClassAllOfAttributes, relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner, b: TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSearch : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripSearches
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripSearch.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearch.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.TripSearch.ModelType
  public var attributes: TripSearch.TripSearchAllOfAttributes
  public var relationships: TripSearch.TripSearchAllOfRelationships
  public var links: TripSearch.SelfLinkLinks?
  public init(id: Swift.String? = nil, type: TripSearch.TripSearch.ModelType, attributes: TripSearch.TripSearchAllOfAttributes, relationships: TripSearch.TripSearchAllOfRelationships, links: TripSearch.SelfLinkLinks? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearch, b: TripSearch.TripSearch) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionDetailsAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferOptionDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferOptionDetailsAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetailsAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferOptionDetailsAllOf.ModelType
  public var attributes: TripSearch.TripOfferOptionDetailsAllOfAttributes
  public var relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships
  public init(id: Swift.String, type: TripSearch.TripOfferOptionDetailsAllOf.ModelType, attributes: TripSearch.TripOfferOptionDetailsAllOfAttributes, relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionDetailsAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetailsAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionDetailsAllOf, b: TripSearch.TripOfferOptionDetailsAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol SearchResultsCoordinatorDelegate {
  func allDataSelected(totalPrice: Swift.Double, tripOfferPriceQuote: TripSearch.TripOfferPriceQuote, passengersCount: [TripSearch.Passenger])
}
public struct TripOfferOptionDetailsIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferOptionDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferOptionDetailsIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetailsIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferOptionDetailsIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.TripOfferOptionDetailsIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionDetailsIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetailsIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionDetailsIdentifier, b: TripSearch.TripOfferOptionDetailsIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingAllOfRelationshipsDetails : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.TripBookingDetailsIdentifier]?
  public init(data: [TripSearch.TripBookingDetailsIdentifier]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingAllOfRelationshipsDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingAllOfRelationshipsDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingAllOfRelationshipsDetails, b: TripSearch.TripBookingAllOfRelationshipsDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostVerificationCodeRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.VerificationCode
  public init(data: TripSearch.VerificationCode)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostVerificationCodeRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostVerificationCodeRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostVerificationCodeRequest, b: TripSearch.PostVerificationCodeRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderCreatableAllOfRelationshipsVoucher : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.VoucherIdentifier
  public init(data: TripSearch.VoucherIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderCreatableAllOfRelationshipsVoucher.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderCreatableAllOfRelationshipsVoucher.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderCreatableAllOfRelationshipsVoucher, b: TripSearch.OrderCreatableAllOfRelationshipsVoucher) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var mainKeyWindow: UIKit.UIWindow? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var rootViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public func topViewController(controller: UIKit.UIViewController? = UIApplication.shared.rootViewController) -> UIKit.UIViewController?
}
public struct UserGroup : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case userGroups
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserGroup.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroup.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.UserGroup.ModelType
  public var attributes: TripSearch.UserGroupAttributes
  public var relationships: TripSearch.UserGroupRelationships?
  public init(id: Swift.String? = nil, type: TripSearch.UserGroup.ModelType, attributes: TripSearch.UserGroupAttributes, relationships: TripSearch.UserGroupRelationships? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroup.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroup.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroup, b: TripSearch.UserGroup) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ContactDetailsAddress : Swift.Codable, Swift.Hashable {
  public var addressLines: [Swift.String]?
  public var countryCode: Swift.String?
  public var postalCode: Swift.String?
  public var city: Swift.String?
  public init(addressLines: [Swift.String]? = nil, countryCode: Swift.String? = nil, postalCode: Swift.String? = nil, city: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case addressLines
    case countryCode
    case postalCode
    case city
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ContactDetailsAddress.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ContactDetailsAddress.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ContactDetailsAddress, b: TripSearch.ContactDetailsAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferSegmentDetailAmenity : Swift.Codable, Swift.Hashable {
  public enum Availability : Swift.String, Swift.Codable, Swift.CaseIterable {
    case unspecified
    case unavailable
    case available
    case included
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferSegmentDetailAmenity.Availability]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferSegmentDetailAmenity.Availability] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var availability: TripSearch.OfferSegmentDetailAmenity.Availability
  public init(availability: TripSearch.OfferSegmentDetailAmenity.Availability)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case availability
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferSegmentDetailAmenity.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferSegmentDetailAmenity.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferSegmentDetailAmenity, b: TripSearch.OfferSegmentDetailAmenity) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferPriceQuote : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferPriceQuotes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferPriceQuote.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuote.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.TripOfferPriceQuote.ModelType
  public var attributes: TripSearch.TripOfferPriceQuoteAllOfAttributes?
  public var relationships: TripSearch.TripOfferPriceQuoteAllOfRelationships
  public var links: TripSearch.SelfLinkLinks?
  public init(id: Swift.String? = nil, type: TripSearch.TripOfferPriceQuote.ModelType, attributes: TripSearch.TripOfferPriceQuoteAllOfAttributes? = nil, relationships: TripSearch.TripOfferPriceQuoteAllOfRelationships, links: TripSearch.SelfLinkLinks? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferPriceQuote, b: TripSearch.TripOfferPriceQuote) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PatchUsersIdRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UserUpdatable?
  public init(data: TripSearch.UserUpdatable? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PatchUsersIdRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PatchUsersIdRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PatchUsersIdRequest, b: TripSearch.PatchUsersIdRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostUsersGroupsRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UserGroup
  public init(data: TripSearch.UserGroup)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostUsersGroupsRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostUsersGroupsRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostUsersGroupsRequest, b: TripSearch.PostUsersGroupsRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offers
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferAllOf.ModelType
  public var attributes: TripSearch.OfferAllOfAttributes
  public var relationships: TripSearch.OfferAllOfRelationships
  public init(id: Swift.String, type: TripSearch.OfferAllOf.ModelType, attributes: TripSearch.OfferAllOfAttributes, relationships: TripSearch.OfferAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferAllOf, b: TripSearch.OfferAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentIntentAttributes : Swift.Codable, Swift.Hashable {
  public var amount: Swift.String?
  public var currency: Swift.String?
  public var clientSecret: Swift.String?
  public var ephemeralKey: Swift.String?
  public var customerId: Swift.String?
  public init(amount: Swift.String?, currency: Swift.String?, clientSecret: Swift.String?, ephemeralKey: Swift.String? = nil, customerId: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PaymentIntentAttributes, b: TripSearch.PaymentIntentAttributes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSearchAllOfAttributes : Swift.Codable, Swift.Hashable {
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case unspecified
    case pending
    case processing
    case completed
    case failed
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripSearchAllOfAttributes.Status]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearchAllOfAttributes.Status] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var expiresAt: Foundation.Date?
  public var departureAfter: Foundation.Date
  public var arrivalBefore: Foundation.Date?
  public var status: TripSearch.TripSearchAllOfAttributes.Status?
  public init(expiresAt: Foundation.Date? = nil, departureAfter: Foundation.Date, arrivalBefore: Foundation.Date? = nil, status: TripSearch.TripSearchAllOfAttributes.Status? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearchAllOfAttributes, b: TripSearch.TripSearchAllOfAttributes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct VoucherIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case vouchers
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.VoucherIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.VoucherIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.VoucherIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.VoucherIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.VoucherIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.VoucherIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.VoucherIdentifier, b: TripSearch.VoucherIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Passenger : Swift.Codable, Swift.Hashable {
  public var dateOfBirth: Swift.String
  public init(dateOfBirth: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case dateOfBirth
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Passenger.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Passenger.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Passenger, b: TripSearch.Passenger) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingDetailsAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var cabinClassName: Swift.String
  public var vendor: Swift.String
  public var _operator: Swift.String?
  public var routeIdentifiers: TripSearch.RouteIdentifiers
  public var legs: [TripSearch.OfferSegmentLeg]
  public init(cabinClassName: Swift.String, vendor: Swift.String, _operator: Swift.String?, routeIdentifiers: TripSearch.RouteIdentifiers, legs: [TripSearch.OfferSegmentLeg])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cabinClassName
    case vendor
    case _operator
    case routeIdentifiers
    case legs
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetailsAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetailsAllOfAttributes, b: TripSearch.TripBookingDetailsAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class PassengersAPI {
  public enum Sort_getPassengersGenders : Swift.String, Swift.CaseIterable {
    case id
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PassengersAPI.Sort_getPassengersGenders]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengersAPI.Sort_getPassengersGenders] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getPassengersGenders(sort: [TripSearch.PassengersAPI.Sort_getPassengersGenders]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetPassengersGenders200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getPassengersGendersWithRequestBuilder(sort: [TripSearch.PassengersAPI.Sort_getPassengersGenders]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil) -> TripSearch.RequestBuilder<TripSearch.GetPassengersGenders200Response>
  public enum Sort_getPassengersTitles : Swift.String, Swift.CaseIterable {
    case id
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PassengersAPI.Sort_getPassengersTitles]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengersAPI.Sort_getPassengersTitles] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getPassengersTitles(sort: [TripSearch.PassengersAPI.Sort_getPassengersTitles]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetPassengersTitles200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getPassengersTitlesWithRequestBuilder(sort: [TripSearch.PassengersAPI.Sort_getPassengersTitles]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil) -> TripSearch.RequestBuilder<TripSearch.GetPassengersTitles200Response>
  @objc deinit
}
public struct GetPassengersGenders200ResponseAllOf : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.PassengerGender]
  public init(data: [TripSearch.PassengerGender])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetPassengersGenders200ResponseAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetPassengersGenders200ResponseAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetPassengersGenders200ResponseAllOf, b: TripSearch.GetPassengersGenders200ResponseAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class PlacesAPI {
  @discardableResult
  open class func getPlaces(queryName: Swift.String? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetPlaces200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getPlacesWithRequestBuilder(queryName: Swift.String? = nil) -> TripSearch.RequestBuilder<TripSearch.GetPlaces200Response>
  @discardableResult
  open class func getPlacesId(placeId: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetPlacesId200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getPlacesIdWithRequestBuilder(placeId: Swift.String) -> TripSearch.RequestBuilder<TripSearch.GetPlacesId200Response>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class OrdersAPI {
  public enum Include_getOrders : Swift.String, Swift.CaseIterable {
    case journey
    case bookings
    case bookingsPeriodDetails
    case bookingsPeriodDetailsPeriodCabinclass
    case bookingsPeriodDetailsPeriodLegtype
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OrdersAPI.Include_getOrders]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrdersAPI.Include_getOrders] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getOrders(include: [TripSearch.OrdersAPI.Include_getOrders]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetOrders200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getOrdersWithRequestBuilder(include: [TripSearch.OrdersAPI.Include_getOrders]? = nil, pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil) -> TripSearch.RequestBuilder<TripSearch.GetOrders200Response>
  public enum Include_getOrdersId : Swift.String, Swift.CaseIterable {
    case journey
    case bookings
    case bookingsPeriodDetails
    case bookingsPeriodDetailsPeriodCabinclass
    case bookingsPeriodDetailsPeriodLegtype
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OrdersAPI.Include_getOrdersId]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrdersAPI.Include_getOrdersId] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @discardableResult
  open class func getOrdersId(orderId: Swift.String, include: [TripSearch.OrdersAPI.Include_getOrdersId]? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetOrdersId200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getOrdersIdWithRequestBuilder(orderId: Swift.String, include: [TripSearch.OrdersAPI.Include_getOrdersId]? = nil) -> TripSearch.RequestBuilder<TripSearch.GetOrdersId200Response>
  @discardableResult
  open class func postOrders(postOrdersRequest: TripSearch.PostOrdersRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetOrdersId200ResponseAllOf?, _ error: (any Swift.Error)?, _ errors: [TripSearch.ModelError]?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postOrdersWithRequestBuilder(sessionToken: Swift.String? = nil, postOrdersRequest: TripSearch.PostOrdersRequest) -> TripSearch.RequestBuilder<TripSearch.GetOrdersId200ResponseAllOf>
  @discardableResult
  open class func postOrdersIdMessages(orderId: Swift.String, postOrdersIdMessagesRequest: TripSearch.PostOrdersIdMessagesRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postOrdersIdMessagesWithRequestBuilder(orderId: Swift.String, postOrdersIdMessagesRequest: TripSearch.PostOrdersIdMessagesRequest) -> TripSearch.RequestBuilder<Swift.Void>
  @objc deinit
}
public struct TravelerDocument : Swift.Codable, Swift.Hashable {
  public enum DocumentType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case passport
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TravelerDocument.DocumentType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TravelerDocument.DocumentType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var documentType: TripSearch.TravelerDocument.DocumentType
  public var documentNumber: Swift.String
  public var documentIssueCountry: Swift.String
  public var documentExpirationDate: Foundation.Date
  public var nationality: Swift.String
  public init(documentType: TripSearch.TravelerDocument.DocumentType, documentNumber: Swift.String, documentIssueCountry: Swift.String, documentExpirationDate: Foundation.Date, nationality: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case documentType
    case documentNumber
    case documentIssueCountry
    case documentExpirationDate
    case nationality
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TravelerDocument.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TravelerDocument.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TravelerDocument, b: TripSearch.TravelerDocument) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferGroup : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offerGroups
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferGroup.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroup.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferGroup.ModelType
  public var attributes: TripSearch.OfferGroupAllOfAttributes
  public var relationships: TripSearch.OfferGroupAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.OfferGroup.ModelType, attributes: TripSearch.OfferGroupAllOfAttributes, relationships: TripSearch.OfferGroupAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferGroup.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroup.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroup, b: TripSearch.OfferGroup) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension Swift.KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encode(_ value: Foundation.Decimal, forKey key: Self.Key) throws
  public mutating func encodeIfPresent(_ value: Foundation.Decimal?, forKey key: Self.Key) throws
}
extension Swift.KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
  public func decode(_ type: Foundation.Decimal.Type, forKey key: Self.Key) throws -> Foundation.Decimal
  public func decodeIfPresent(_ type: Foundation.Decimal.Type, forKey key: Self.Key) throws -> Foundation.Decimal?
}
public struct TripBookingDetailsAllOfRelationshipsCabinClass : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.CabinClassIdentifier
  public init(data: TripSearch.CabinClassIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass, b: TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferSearchAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var expiresAt: Foundation.Date?
  public var sessionToken: Swift.String
  public var passengers: [TripSearch.Passenger]
  public var loyalty: TripSearch.LoyaltyCard?
  public init(expiresAt: Foundation.Date? = nil, passengers: [TripSearch.Passenger], loyalty: TripSearch.LoyaltyCard? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferSearchAllOfAttributes, b: TripSearch.TripOfferSearchAllOfAttributes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var departureAt: Foundation.Date
  public var arrivalAt: Foundation.Date
  public var origin: TripSearch.Point
  public var destination: TripSearch.Point
  public init(departureAt: Foundation.Date, arrivalAt: Foundation.Date, origin: TripSearch.Point, destination: TripSearch.Point)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case departureAt
    case arrivalAt
    case origin
    case destination
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LegAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LegAllOfAttributes, b: TripSearch.LegAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserProfileDataAttributes : Swift.Codable, Swift.Hashable {
  public enum Gender : Swift.String, Swift.Codable, Swift.CaseIterable {
    case female
    case male
    case unspecified
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserProfileDataAttributes.Gender]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileDataAttributes.Gender] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Title : Swift.String, Swift.Codable, Swift.CaseIterable {
    case mr
    case mrs
    case miss
    case ms
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserProfileDataAttributes.Title]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileDataAttributes.Title] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var gender: TripSearch.UserProfileDataAttributes.Gender?
  public var title: TripSearch.UserProfileDataAttributes.Title?
  public var countryCode: Swift.String?
  public var dateOfBirth: Foundation.Date?
  public var loyaltyPrograms: [TripSearch.LoyaltyProgramUserProfile]?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, gender: TripSearch.UserProfileDataAttributes.Gender? = nil, title: TripSearch.UserProfileDataAttributes.Title? = nil, countryCode: Swift.String? = nil, dateOfBirth: Foundation.Date? = nil, loyaltyPrograms: [TripSearch.LoyaltyProgramUserProfile]? = nil, createdAt: Foundation.Date? = nil, updatedAt: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case email
    case phone
    case gender
    case title
    case countryCode
    case dateOfBirth
    case loyaltyPrograms
    case createdAt
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserProfileDataAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileDataAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserProfileDataAttributes, b: TripSearch.UserProfileDataAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static var defaultNib: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var storyboardIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var className: Swift.String {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
public struct PostPaymentsRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.PaymentIntent
  public init(data: TripSearch.PaymentIntent)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostPaymentsRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostPaymentsRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostPaymentsRequest, b: TripSearch.PostPaymentsRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChangePasswordBodyDataAttributes : Swift.Codable, Swift.Hashable {
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var gender: Swift.String?
  public var title: Swift.String?
  public var countryCode: Swift.String?
  public var dateOfBirth: Swift.String?
  public var oldPassword: Swift.String?
  public var newPassword: Swift.String?
  public init(oldPassword: Swift.String? = nil, newPassword: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, gender: Swift.String? = nil, title: Swift.String? = nil, countryCode: Swift.String? = nil, dateOfBirth: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case oldPassword
    case newPassword
    case firstName
    case lastName
    case email
    case phone
    case gender
    case title
    case countryCode
    case dateOfBirth
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ChangePasswordBodyDataAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ChangePasswordBodyDataAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ChangePasswordBodyDataAttributes, b: TripSearch.ChangePasswordBodyDataAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserGroupRelationships : Swift.Codable, Swift.Hashable {
  public var members: TripSearch.UserGroupRelationshipsMembers
  public init(members: TripSearch.UserGroupRelationshipsMembers)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case members
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserGroupRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserGroupRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserGroupRelationships, b: TripSearch.UserGroupRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingDetailsAllOfRelationshipsLegType : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.LegTypeIdentifier
  public init(data: TripSearch.LegTypeIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetailsAllOfRelationshipsLegType.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsAllOfRelationshipsLegType.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetailsAllOfRelationshipsLegType, b: TripSearch.TripBookingDetailsAllOfRelationshipsLegType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderCreatableAllOfRelationshipsPayment : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.PaymentIdentifier
  public init(data: TripSearch.PaymentIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderCreatableAllOfRelationshipsPayment.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderCreatableAllOfRelationshipsPayment.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderCreatableAllOfRelationshipsPayment, b: TripSearch.OrderCreatableAllOfRelationshipsPayment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PassengerGenderAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public init(name: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PassengerGenderAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerGenderAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PassengerGenderAllOfAttributes, b: TripSearch.PassengerGenderAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class PaymentAPI {
  @discardableResult
  open class func postPayments(postPaymentsRequest: TripSearch.PostPaymentsRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostPayments200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postPaymentsWithRequestBuilder(postPaymentsRequest: TripSearch.PostPaymentsRequest) -> TripSearch.RequestBuilder<TripSearch.PostPayments200Response>
  @objc deinit
}
public struct OrderCreatableAttributes : Swift.Codable, Swift.Hashable {
  public var contactDetails: TripSearch.ContactDetails
  public var passengers: Swift.Array<TripSearch.OrderPassenger>
  public init(contactDetails: TripSearch.ContactDetails, passengers: Swift.Array<TripSearch.OrderPassenger>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case contactDetails
    case passengers
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderCreatableAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderCreatableAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderCreatableAttributes, b: TripSearch.OrderCreatableAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostTripsSearches422Response : Swift.Codable, Swift.Hashable {
  public var errors: [TripSearch.ModelError]?
  public init(errors: [TripSearch.ModelError]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case errors
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostTripsSearches422Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostTripsSearches422Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostTripsSearches422Response, b: TripSearch.PostTripsSearches422Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserOwn : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UserData
  public init(data: TripSearch.UserData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserOwn.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserOwn.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserOwn, b: TripSearch.UserOwn) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOrdersId200ResponseAllOf : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.Order
  public init(data: TripSearch.Order)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetOrdersId200ResponseAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOrdersId200ResponseAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOrdersId200ResponseAllOf, b: TripSearch.GetOrdersId200ResponseAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderCreatable : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case orders
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OrderCreatable.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderCreatable.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: TripSearch.OrderCreatable.ModelType
  public var attributes: TripSearch.OrderCreatableAttributes
  public var relationships: TripSearch.OrderCreatableRelationships
  public init(type: TripSearch.OrderCreatable.ModelType, attributes: TripSearch.OrderCreatableAttributes, relationships: TripSearch.OrderCreatableRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderCreatable.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderCreatable.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderCreatable, b: TripSearch.OrderCreatable) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostTripsSearches400Response : Swift.Codable, Swift.Hashable {
  public var errors: Swift.Set<TripSearch.ModelError>
  public init(errors: Swift.Set<TripSearch.ModelError>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case errors
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostTripsSearches400Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostTripsSearches400Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostTripsSearches400Response, b: TripSearch.PostTripsSearches400Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum TripSearchError {
  case emptyResults
  case tripCandidatesSearchesErrorPost(error: (any Swift.Error)?)
  case tripCandidatesSearchesErrorGet(error: (any Swift.Error)?)
  case tripCandidatesSearchesErrorGetOffer(error: (any Swift.Error)?)
  case quotesPostError(error: (any Swift.Error)?)
  case quotesGetError(error: (any Swift.Error)?)
}
public protocol SearchManagerDelegate {
  func allDataSelected(totalPrice: Swift.Double, tripOfferPriceQuote: TripSearch.TripOfferPriceQuote, passengersCount: [TripSearch.Passenger])
  func errorAccured(error: TripSearch.TripSearchError)
  func fontError(error: Swift.String)
  func bookingSucceed()
}
public class SearchManager : TripSearch.TripSearchCoordinatorDelegate {
  public var delegate: (any TripSearch.SearchManagerDelegate)?
  public init()
  public func giveNavController() -> UIKit.UINavigationController
  public func showSearch(myNavigationController navCtrl: UIKit.UINavigationController)
  public func allDataSelected(totalPrice: Swift.Double, tripOfferPriceQuote: TripSearch.TripOfferPriceQuote, passengersCount: [TripSearch.Passenger])
  @objc deinit
}
extension TripSearch.SearchManager {
  public struct Configuration {
    public init()
    public static var defaultFont: Swift.String
    public static var actionButtonFontName: Swift.String
    public static var actionButtonFontSize: Swift.CFloat
    public static var navTitleFontName: Swift.String
    public static var navTitleFontSize: Swift.CFloat
    public static var textInputFontName: Swift.String
    public static var textInputFontSize: Swift.CFloat
    public static var calendareNumbersFontName: Swift.String
    public static var calendareNumbersFontSize: Swift.CFloat
    public static var priceLabelFontName: Swift.String
    public static var dateLabelFontName: Swift.String
    public static var accentColor: Swift.String
    public static var secondaryAccentColor: Swift.String
    public static var primaryBackgroundColor: Swift.String
    public static var secondaryBackgroundColor: Swift.String
    public static var primaryActionButtonColor: Swift.String
    public static var primaryActionButtonTextColor: Swift.String
    public static var secondaryActionButtonTextColor: Swift.String
    public static var primaryTextColor: Swift.String
    public static var secondaryTextColor: Swift.String
    public static var cardBGColor: Swift.String
    public static var co2InfoBGColor: Swift.String
  }
}
public struct GetTripsSearchesIdTrips200ResponseAllOf1 : Swift.Codable, Swift.Hashable {
  public var included: Swift.Set<TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner>?
  public init(included: Swift.Set<TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner>? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case included
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1, b: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum OrderAllOfRelationshipsBookingsDataOneOf : Swift.Codable, Swift.Hashable {
  case typeTripBookingIdentifier(TripSearch.TripBookingIdentifier)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfRelationshipsBookingsDataOneOf, b: TripSearch.OrderAllOfRelationshipsBookingsDataOneOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct OfferGroupAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var options: TripSearch.OfferGroupAllOfRelationshipsOptions
  public var details: TripSearch.OfferGroupAllOfRelationshipsDetails
  public init(options: TripSearch.OfferGroupAllOfRelationshipsOptions, details: TripSearch.OfferGroupAllOfRelationshipsDetails)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case options
    case details
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferGroupAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroupAllOfRelationships, b: TripSearch.OfferGroupAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserProfile : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UserProfileData
  public init(data: TripSearch.UserProfileData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserProfile.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfile.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserProfile, b: TripSearch.UserProfile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOfRelationshipsQuote : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.TripOfferPriceQuoteIdentifier
  public init(data: TripSearch.TripOfferPriceQuoteIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOfRelationshipsQuote.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOfRelationshipsQuote.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfRelationshipsQuote, b: TripSearch.OrderAllOfRelationshipsQuote) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BookingStatusIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case bookingStatuses
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.BookingStatusIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.BookingStatusIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.BookingStatusIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.BookingStatusIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.BookingStatusIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.BookingStatusIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.BookingStatusIdentifier, b: TripSearch.BookingStatusIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOrdersId200Response : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.Order
  public var included: [TripSearch.OrderIncludedValue]?
  public init(data: TripSearch.Order, included: [TripSearch.OrderIncludedValue]? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOrdersId200Response, b: TripSearch.GetOrdersId200Response) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetPassengersGenders200Response : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.PassengerGender]
  public var links: TripSearch.NextLinkLinks
  public init(data: [TripSearch.PassengerGender], links: TripSearch.NextLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetPassengersGenders200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetPassengersGenders200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetPassengersGenders200Response, b: TripSearch.GetPassengersGenders200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostOrdersIdMessagesRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.OrderMessage
  public init(data: TripSearch.OrderMessage)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostOrdersIdMessagesRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostOrdersIdMessagesRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostOrdersIdMessagesRequest, b: TripSearch.PostOrdersIdMessagesRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripCandidateSearchCriteria : Swift.Codable, Swift.Hashable {
  public var origin: TripSearch.Coordinates
  public var destination: TripSearch.Coordinates
  public var departureAfter: Foundation.Date
  public var maximumConnections: Swift.Int
  public init(origin: TripSearch.Coordinates, destination: TripSearch.Coordinates, departureAfter: Foundation.Date, maximumConnections: Swift.Int)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripCandidateSearchCriteria, b: TripSearch.TripCandidateSearchCriteria) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Order : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case orders
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Order.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Order.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.Order.ModelType
  public var attributes: TripSearch.OrderAllOfAttributes
  public var relationships: TripSearch.OrderAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.Order.ModelType, attributes: TripSearch.OrderAllOfAttributes, relationships: TripSearch.OrderAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Order.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Order.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Order, b: TripSearch.Order) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum OfferSearchIncludedValue : Swift.Codable, Swift.Hashable {
  case typeOfferGroup(TripSearch.OfferGroup)
  case typeTripOfferGroupDetails(TripSearch.TripOfferGroupDetails)
  case typeLegType(TripSearch.LegType)
  case typeOfferOption(TripSearch.OfferOption)
  case typeTripOfferOptionDetails(TripSearch.TripOfferOptionDetails)
  case typeCabinClass(TripSearch.CabinClass)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferSearchIncludedValue, b: TripSearch.OfferSearchIncludedValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TripBookingAllOfRelationshipsOrder : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.OrderIdentifier
  public init(data: TripSearch.OrderIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingAllOfRelationshipsOrder.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingAllOfRelationshipsOrder.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingAllOfRelationshipsOrder, b: TripSearch.TripBookingAllOfRelationshipsOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetHealth200Response : Swift.Codable, Swift.Hashable {
  public var meta: TripSearch.GetHealth200ResponseMeta
  public init(meta: TripSearch.GetHealth200ResponseMeta)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case meta
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetHealth200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetHealth200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetHealth200Response, b: TripSearch.GetHealth200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offers
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.OfferIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferIdentifier, b: TripSearch.OfferIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOffersSearchesIdOffers200ResponseAllOfIncludedInner : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case cabinClasses
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.ModelType
  public var attributes: TripSearch.CabinClassAllOfAttributes
  public var relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.ModelType, attributes: TripSearch.CabinClassAllOfAttributes, relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner, b: TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct RouteIdentifiers : Swift.Codable, Swift.Hashable {
  public var vendor: Swift.String
  public var _operator: Swift.String?
  public init(vendor: Swift.String, _operator: Swift.String?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case vendor
    case _operator
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.RouteIdentifiers.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.RouteIdentifiers.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.RouteIdentifiers, b: TripSearch.RouteIdentifiers) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferGroupAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offerGroups
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferGroupAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferGroupAllOf.ModelType
  public var attributes: TripSearch.OfferGroupAllOfAttributes
  public var relationships: TripSearch.OfferGroupAllOfRelationships
  public init(id: Swift.String, type: TripSearch.OfferGroupAllOf.ModelType, attributes: TripSearch.OfferGroupAllOfAttributes, relationships: TripSearch.OfferGroupAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferGroupAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroupAllOf, b: TripSearch.OfferGroupAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetPlacesId200Response : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.Place
  public init(data: TripSearch.Place)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetPlacesId200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetPlacesId200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetPlacesId200Response, b: TripSearch.GetPlacesId200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LoyaltyProgramAttributes : Swift.Codable, Swift.Hashable {
  public var iata: Swift.String
  public var airline: Swift.String
  public var name: Swift.String
  public init(iata: Swift.String, airline: Swift.String, name: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case iata
    case airline
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LoyaltyProgramAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LoyaltyProgramAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LoyaltyProgramAttributes, b: TripSearch.LoyaltyProgramAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripCandidateSearchAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var allowedSegmentTypes: TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes?
  public init(allowedSegmentTypes: TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripCandidateSearchAllOfRelationships, b: TripSearch.TripCandidateSearchAllOfRelationships) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferSearchAllOfRelationshipsOffers : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OfferIdentifier]
  public init(data: [TripSearch.OfferIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferSearchAllOfRelationshipsOffers.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferSearchAllOfRelationshipsOffers.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferSearchAllOfRelationshipsOffers, b: TripSearch.TripOfferSearchAllOfRelationshipsOffers) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserSession : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case userSessions
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserSession.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserSession.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.UserSession.ModelType
  public var attributes: TripSearch.UserSessionAttributes?
  public init(id: Swift.String? = nil, type: TripSearch.UserSession.ModelType, attributes: TripSearch.UserSessionAttributes? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserSession.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserSession.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserSession, b: TripSearch.UserSession) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Price : Swift.Codable, Swift.Hashable {
  public var currency: Swift.String
  public var amount: Swift.String
  public init(currency: Swift.String, amount: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case currency
    case amount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Price.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Price.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Price, b: TripSearch.Price) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetPassengersTitles200Response : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.PassengerTitle]
  public var links: TripSearch.NextLinkLinks
  public init(data: [TripSearch.PassengerTitle], links: TripSearch.NextLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetPassengersTitles200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetPassengersTitles200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetPassengersTitles200Response, b: TripSearch.GetPassengersTitles200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegType : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case legTypes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.LegType.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegType.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.LegType.ModelType
  public var attributes: TripSearch.LegTypeAllOfAttributes
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.LegType.ModelType, attributes: TripSearch.LegTypeAllOfAttributes, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LegType.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegType.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LegType, b: TripSearch.LegType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GuestAttributes : Swift.Codable, Swift.Hashable {
  public var createdAt: Foundation.Date
  public init(createdAt: Foundation.Date)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case createdAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GuestAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GuestAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GuestAttributes, b: TripSearch.GuestAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum Storyboard : Swift.String {
  case tripSearch
  case wowFeatures
  case booking
  case search
  case searchResults
  case journeys
  case dice
  case customerDetails
  case pastUpcommingTrips
  case inspire
  case onboarding
  case travelPreferences
  case loyaltyProgramInput
  case settings
  public func instantiate<ViewController>(_ viewController: ViewController.Type, inBundle bundle: Foundation.Bundle = Bundle(for: ViewController.self)) -> ViewController where ViewController : UIKit.UIViewController
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OfferOptionAllOfRelationshipsDetails : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OfferOptionAllOfRelationshipsDetailsDataOneOf]?
  public init(data: [TripSearch.OfferOptionAllOfRelationshipsDetailsDataOneOf]?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferOptionAllOfRelationshipsDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOptionAllOfRelationshipsDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferOptionAllOfRelationshipsDetails, b: TripSearch.OfferOptionAllOfRelationshipsDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferPriceQuoteAllOfRelationshipsOptions : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OfferOptionIdentifier]
  public init(data: [TripSearch.OfferOptionIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions, b: TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetPassengersTitles200ResponseAllOf : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.PassengerTitle]
  public init(data: [TripSearch.PassengerTitle])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetPassengersTitles200ResponseAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetPassengersTitles200ResponseAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetPassengersTitles200ResponseAllOf, b: TripSearch.GetPassengersTitles200ResponseAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferOptionAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var details: TripSearch.OfferOptionAllOfRelationshipsDetails
  public init(details: TripSearch.OfferOptionAllOfRelationshipsDetails)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case details
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferOptionAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferOptionAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferOptionAllOfRelationships, b: TripSearch.OfferOptionAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Guest : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case guests
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Guest.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Guest.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.Guest.ModelType
  public var attributes: TripSearch.GuestAttributes?
  public init(id: Swift.String? = nil, type: TripSearch.Guest.ModelType, attributes: TripSearch.GuestAttributes? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Guest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Guest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Guest, b: TripSearch.Guest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserDataAttributes : Swift.Codable, Swift.Hashable {
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var password: Swift.String?
  public var email: Swift.String
  public var phone: Swift.String
  public var updatedAt: Foundation.Date?
  public init(firstName: Swift.String, lastName: Swift.String, password: Swift.String? = nil, email: Swift.String, phone: Swift.String, updatedAt: Foundation.Date? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case password
    case email
    case phone
    case updatedAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserDataAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserDataAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserDataAttributes, b: TripSearch.UserDataAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var totalPrice: TripSearch.Price
  public var operatorBookingReferences: [Swift.String]
  public var externalReference: Swift.String
  public init(totalPrice: TripSearch.Price, operatorBookingReferences: [Swift.String], externalReference: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case totalPrice
    case operatorBookingReferences
    case externalReference
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingAllOfAttributes, b: TripSearch.TripBookingAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostTripsSearchesRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.TripSearch
  public init(data: TripSearch.TripSearch)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostTripsSearchesRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostTripsSearchesRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostTripsSearchesRequest, b: TripSearch.PostTripsSearchesRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct City : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Airport : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrainStation : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers open class AlamofireRequestBuilder<T> : TripSearch.RequestBuilder<T> {
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = [:], requiresAuthentication: Swift.Bool)
  open func createAlamofireSession(interceptor: (any Alamofire.RequestInterceptor)? = nil) -> Alamofire.Session
  open func createURLRequest() -> Foundation.URLRequest?
  open func contentTypeForFormPart(fileURL: Foundation.URL) -> Swift.String?
  open func makeRequest(manager: Alamofire.Session, method: Alamofire.HTTPMethod, encoding: any Alamofire.ParameterEncoding, headers: [Swift.String : Swift.String]) -> Alamofire.DataRequest
  @discardableResult
  override open func execute(_ apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, _ completion: @escaping (_ result: Swift.Result<TripSearch.Response<T>, TripSearch.ErrorResponse>) -> Swift.Void) -> TripSearch.RequestTask
  open func buildHeaders() -> [Swift.String : Swift.String]
  @objc deinit
}
@_inheritsConvenienceInitializers open class AlamofireDecodableRequestBuilder<T> : TripSearch.AlamofireRequestBuilder<T> where T : Swift.Decodable {
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = super, requiresAuthentication: Swift.Bool)
  @objc deinit
}
extension TripSearch.JSONDataEncoding : Alamofire.ParameterEncoding {
  public func encode(_ urlRequest: any Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
}
public struct PassengerGenderAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case passengerGenders
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PassengerGenderAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerGenderAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.PassengerGenderAllOf.ModelType
  public var attributes: TripSearch.PassengerGenderAllOfAttributes
  public init(id: Swift.String, type: TripSearch.PassengerGenderAllOf.ModelType, attributes: TripSearch.PassengerGenderAllOfAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PassengerGenderAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerGenderAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PassengerGenderAllOf, b: TripSearch.PassengerGenderAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CabinClassAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case cabinClasses
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.CabinClassAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.CabinClassAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.CabinClassAllOf.ModelType
  public var attributes: TripSearch.CabinClassAllOfAttributes
  public init(id: Swift.String, type: TripSearch.CabinClassAllOf.ModelType, attributes: TripSearch.CabinClassAllOfAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.CabinClassAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.CabinClassAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.CabinClassAllOf, b: TripSearch.CabinClassAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var jsonDecoder: Foundation.JSONDecoder {
    get
    set
  }
  public static var jsonEncoder: Foundation.JSONEncoder {
    get
    set
  }
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> Swift.Result<T, any Swift.Error> where T : Swift.Decodable
  open class func encode<T>(_ value: T) -> Swift.Result<Foundation.Data, any Swift.Error> where T : Swift.Encodable
  @objc deinit
}
public enum OfferGroupAllOfRelationshipsDetailsDataOneOf : Swift.Codable, Swift.Hashable {
  case typeTripOfferGroupDetailsIdentifier(TripSearch.TripOfferGroupDetailsIdentifier)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroupAllOfRelationshipsDetailsDataOneOf, b: TripSearch.OfferGroupAllOfRelationshipsDetailsDataOneOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Segment : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case segments
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Segment.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Segment.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.Segment.ModelType
  public var relationships: TripSearch.SegmentAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.Segment.ModelType, relationships: TripSearch.SegmentAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Segment, b: TripSearch.Segment) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class func fromNib(_ nibNameOrNil: Swift.String? = nil) -> Self
  @_Concurrency.MainActor(unsafe) public class func _fromNib<T>(_ nibNameOrNil: Swift.String? = nil) -> T where T : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public class func _fromNib<T>(_ nibNameOrNil: Swift.String? = nil) -> T? where T : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public class var nibName: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public class var nib: UIKit.UINib? {
    get
  }
}
public struct LegTypeIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case legTypes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.LegTypeIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegTypeIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.LegTypeIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.LegTypeIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LegTypeIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegTypeIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LegTypeIdentifier, b: TripSearch.LegTypeIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOfRelationshipsJourney : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.JourneyIdentifier
  public init(data: TripSearch.JourneyIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOfRelationshipsJourney.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOfRelationshipsJourney.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfRelationshipsJourney, b: TripSearch.OrderAllOfRelationshipsJourney) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTripCandidatesSearchesIdOffers200ResponseAllOf : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.Offer>
  public var included: [TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner]?
  public init(data: Swift.Set<TripSearch.Offer>, included: [TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner]? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOf, b: TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOf) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOffersSearchesId200Response : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.GetOffersSearchesId200ResponseData
  public var included: [TripSearch.GetOffersSearchesId200ResponseIncludedInner]?
  public init(data: TripSearch.GetOffersSearchesId200ResponseData, included: [TripSearch.GetOffersSearchesId200ResponseIncludedInner]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    case included
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetOffersSearchesId200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOffersSearchesId200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOffersSearchesId200Response, b: TripSearch.GetOffersSearchesId200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetUsersGroupsId200Response : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UserGroup
  public init(data: TripSearch.UserGroup)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetUsersGroupsId200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetUsersGroupsId200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetUsersGroupsId200Response, b: TripSearch.GetUsersGroupsId200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CabinClassAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var name: Swift.String?
  public init(name: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.CabinClassAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.CabinClassAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.CabinClassAllOfAttributes, b: TripSearch.CabinClassAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct JourneyAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var orders: TripSearch.JourneyAllOfRelationshipsOrders
  public init(orders: TripSearch.JourneyAllOfRelationshipsOrders)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case orders
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.JourneyAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.JourneyAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.JourneyAllOfRelationships, b: TripSearch.JourneyAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SegmentIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case segments
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.SegmentIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.SegmentIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.SegmentIdentifier.ModelType?
  public init(id: Swift.String, type: TripSearch.SegmentIdentifier.ModelType? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.SegmentIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.SegmentIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.SegmentIdentifier, b: TripSearch.SegmentIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostOrdersRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.OrderCreatable
  public init(data: TripSearch.OrderCreatable)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostOrdersRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostOrdersRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostOrdersRequest, b: TripSearch.PostOrdersRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Trip : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case trips
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Trip.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Trip.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.Trip.ModelType
  public var relationships: TripSearch.TripAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.Trip.ModelType, relationships: TripSearch.TripAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Trip, b: TripSearch.Trip) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSearchAllOfRelationshipsAllowedSegmentTypes : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.LegTypeIdentifier>
  public init(data: Swift.Set<TripSearch.LegTypeIdentifier>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes, b: TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferAllOfRelationshipsGroups : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OfferGroupIdentifier]
  public init(data: [TripSearch.OfferGroupIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferAllOfRelationshipsGroups.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferAllOfRelationshipsGroups.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferAllOfRelationshipsGroups, b: TripSearch.OfferAllOfRelationshipsGroups) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionDetailsAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var cabinClassName: Swift.String?
  public var baggageAllowances: [TripSearch.TripOfferOptionPenaltyBaggageAllowance]
  public var amenities: TripSearch.OfferSegmentDetailAmenities
  public init(cabinClassName: Swift.String?, baggageAllowances: [TripSearch.TripOfferOptionPenaltyBaggageAllowance], amenities: TripSearch.OfferSegmentDetailAmenities)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionDetailsAllOfAttributes, b: TripSearch.TripOfferOptionDetailsAllOfAttributes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ModelError : Swift.Codable, Swift.Hashable {
  public var status: Swift.String
  public var title: Swift.String?
  public var detail: Swift.String
  public var code: Swift.String?
  public var source: TripSearch.ErrorSource?
  public init(status: Swift.String, title: Swift.String? = nil, detail: Swift.String, code: Swift.String? = nil, source: TripSearch.ErrorSource? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case status
    case title
    case detail
    case code
    case source
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ModelError.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ModelError.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ModelError, b: TripSearch.ModelError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct JourneyAllOfRelationshipsOrders : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OrderIdentifier]
  public init(data: [TripSearch.OrderIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.JourneyAllOfRelationshipsOrders.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.JourneyAllOfRelationshipsOrders.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.JourneyAllOfRelationshipsOrders, b: TripSearch.JourneyAllOfRelationshipsOrders) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class PreferencesAPI {
  @discardableResult
  open class func getUsersMePreferences(apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetUsersMePreferences200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getUsersMePreferencesWithRequestBuilder() -> TripSearch.RequestBuilder<TripSearch.GetUsersMePreferences200Response>
  @discardableResult
  open class func patchUsersMePreferences(patchUsersMePreferencesRequest: TripSearch.PatchUsersMePreferencesRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func patchUsersMePreferencesWithRequestBuilder(patchUsersMePreferencesRequest: TripSearch.PatchUsersMePreferencesRequest) -> TripSearch.RequestBuilder<Swift.Void>
  @objc deinit
}
public struct ChangePasswordBodyData : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case users
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.ChangePasswordBodyData.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ChangePasswordBodyData.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.ChangePasswordBodyData.ModelType
  public var attributes: TripSearch.ChangePasswordBodyDataAttributes
  public init(id: Swift.String? = nil, type: TripSearch.ChangePasswordBodyData.ModelType, attributes: TripSearch.ChangePasswordBodyDataAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ChangePasswordBodyData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ChangePasswordBodyData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ChangePasswordBodyData, b: TripSearch.ChangePasswordBodyData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderMessageAttributes : Swift.Codable, Swift.Hashable {
  public var email: Swift.String
  public init(email: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case email
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderMessageAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderMessageAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderMessageAttributes, b: TripSearch.OrderMessageAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferGroupDetailsAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferGroupDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferGroupDetailsAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetailsAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferGroupDetailsAllOf.ModelType
  public var attributes: TripSearch.TripOfferGroupDetailsAllOfAttributes
  public var relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships
  public init(id: Swift.String, type: TripSearch.TripOfferGroupDetailsAllOf.ModelType, attributes: TripSearch.TripOfferGroupDetailsAllOfAttributes, relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferGroupDetailsAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetailsAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferGroupDetailsAllOf, b: TripSearch.TripOfferGroupDetailsAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOfRelationshipsBookings : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.OrderAllOfRelationshipsBookingsDataOneOf]
  public init(data: [TripSearch.OrderAllOfRelationshipsBookingsDataOneOf])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOfRelationshipsBookings.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOfRelationshipsBookings.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfRelationshipsBookings, b: TripSearch.OrderAllOfRelationshipsBookings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceTypeIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case placeTypes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PlaceTypeIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PlaceTypeIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.PlaceTypeIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.PlaceTypeIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PlaceTypeIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PlaceTypeIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PlaceTypeIdentifier, b: TripSearch.PlaceTypeIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferPriceQuoteIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferPriceQuotes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferPriceQuoteIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.TripOfferPriceQuoteIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferPriceQuoteIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferPriceQuoteIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferPriceQuoteIdentifier, b: TripSearch.TripOfferPriceQuoteIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Optional {
  public func require(hint hintExpression: @autoclosure () -> Swift.String? = nil, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> Wrapped
  public func require<T>(hint hintExpression: @autoclosure () -> Swift.String? = nil, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> T
}
public struct PostGuestsSessionsRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.GuestSession?
  public init(data: TripSearch.GuestSession? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostGuestsSessionsRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostGuestsSessionsRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostGuestsSessionsRequest, b: TripSearch.PostGuestsSessionsRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserProfileData : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case users
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserProfileData.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileData.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.UserProfileData.ModelType
  public var attributes: TripSearch.UserProfileDataAttributes
  public init(id: Swift.String, type: TripSearch.UserProfileData.ModelType, attributes: TripSearch.UserProfileDataAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserProfileData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserProfileData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserProfileData, b: TripSearch.UserProfileData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Style {
  public init()
}
public struct UpdatePreference : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case preferences
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UpdatePreference.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UpdatePreference.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.UpdatePreference.ModelType
  public var attributes: TripSearch.UpdatePreferenceAttributes
  public init(id: Swift.String? = nil, type: TripSearch.UpdatePreference.ModelType, attributes: TripSearch.UpdatePreferenceAttributes)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UpdatePreference, b: TripSearch.UpdatePreference) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CabinClassIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case cabinClasses
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.CabinClassIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.CabinClassIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.CabinClassIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.CabinClassIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.CabinClassIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.CabinClassIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.CabinClassIdentifier, b: TripSearch.CabinClassIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SegmentAllOfRelationshipsLegs : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.LegIdentifier]
  public init(data: [TripSearch.LegIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.SegmentAllOfRelationshipsLegs.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.SegmentAllOfRelationshipsLegs.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.SegmentAllOfRelationshipsLegs, b: TripSearch.SegmentAllOfRelationshipsLegs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostGuests400Response : Swift.Codable, Swift.Hashable {
  public var errors: Swift.Set<TripSearch.ModelError>
  public init(errors: Swift.Set<TripSearch.ModelError>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case errors
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostGuests400Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostGuests400Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostGuests400Response, b: TripSearch.PostGuests400Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, renamed: "OpenAPIClientAPI")
public typealias OpenAPIClient = TripSearch.OpenAPIClientAPI
@_hasMissingDesignatedInitializers open class OpenAPIClientAPI {
  public static var basePath: Swift.String
  public static var customHeaders: [Swift.String : Swift.String]
  public static var credential: Foundation.URLCredential?
  public static var requestBuilderFactory: any TripSearch.RequestBuilderFactory
  public static var apiResponseQueue: Dispatch.DispatchQueue
  @objc deinit
}
open class RequestBuilder<T> {
  final public let parameters: [Swift.String : Any]?
  final public let method: Swift.String
  final public let URLString: Swift.String
  final public let requestTask: TripSearch.RequestTask
  final public let requiresAuthentication: Swift.Bool
  public var onProgressReady: ((Foundation.Progress) -> Swift.Void)?
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = [:], requiresAuthentication: Swift.Bool)
  open func addHeaders(_ aHeaders: [Swift.String : Swift.String])
  @discardableResult
  open func execute(_ apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, _ completion: @escaping (_ result: Swift.Result<TripSearch.Response<T>, TripSearch.ErrorResponse>) -> Swift.Void) -> TripSearch.RequestTask
  public func addHeader(name: Swift.String, value: Swift.String) -> Self
  open func addCredential() -> Self
  @objc deinit
}
public protocol RequestBuilderFactory {
  func getNonDecodableBuilder<T>() -> TripSearch.RequestBuilder<T>.Type
  func getBuilder<T>() -> TripSearch.RequestBuilder<T>.Type where T : Swift.Decodable
}
public struct Preference : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case preferences
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Preference.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Preference.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.Preference.ModelType
  public var attributes: TripSearch.PreferenceAttributes
  public init(id: Swift.String, type: TripSearch.Preference.ModelType, attributes: TripSearch.PreferenceAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Preference.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Preference.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Preference, b: TripSearch.Preference) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetUsersGroupsIdMembers200Response : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.UserGroupMember>
  public init(data: Swift.Set<TripSearch.UserGroupMember>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetUsersGroupsIdMembers200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetUsersGroupsIdMembers200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetUsersGroupsIdMembers200Response, b: TripSearch.GetUsersGroupsIdMembers200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SecondIBDesignableButton : UIKit.UIButton, TripSearch.Roundable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var masksToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct GetUsersGroups400Response : Swift.Codable, Swift.Hashable {
  public var errors: Swift.Set<TripSearch.ModelError>
  public init(errors: Swift.Set<TripSearch.ModelError>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case errors
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetUsersGroups400Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetUsersGroups400Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetUsersGroups400Response, b: TripSearch.GetUsersGroups400Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSearchAllOfRelationshipsLegTypes : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.LegTypeIdentifier>
  public init(data: Swift.Set<TripSearch.LegTypeIdentifier>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripSearchAllOfRelationshipsLegTypes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearchAllOfRelationshipsLegTypes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearchAllOfRelationshipsLegTypes, b: TripSearch.TripSearchAllOfRelationshipsLegTypes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PassengerTitleAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case passengerTitles
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PassengerTitleAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerTitleAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.PassengerTitleAllOf.ModelType
  public var attributes: TripSearch.PassengerTitleAllOfAttributes
  public init(id: Swift.String, type: TripSearch.PassengerTitleAllOf.ModelType, attributes: TripSearch.PassengerTitleAllOfAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PassengerTitleAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerTitleAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PassengerTitleAllOf, b: TripSearch.PassengerTitleAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTripsSearchesIdTrips200Response : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.Trip]
  public var included: [TripSearch.TripSearchIncludedValue]?
  public init(data: [TripSearch.Trip], included: [TripSearch.TripSearchIncludedValue]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    case included
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetTripsSearchesIdTrips200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetTripsSearchesIdTrips200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetTripsSearchesIdTrips200Response, b: TripSearch.GetTripsSearchesIdTrips200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case places
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PlaceIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PlaceIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.PlaceIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.PlaceIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PlaceIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PlaceIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PlaceIdentifier, b: TripSearch.PlaceIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case orders
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OrderAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OrderAllOf.ModelType
  public var attributes: TripSearch.OrderAllOfAttributes
  public var relationships: TripSearch.OrderAllOfRelationships
  public init(id: Swift.String, type: TripSearch.OrderAllOf.ModelType, attributes: TripSearch.OrderAllOfAttributes, relationships: TripSearch.OrderAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOf, b: TripSearch.OrderAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum OfferOptionAllOfRelationshipsDetailsDataOneOf : Swift.Codable, Swift.Hashable {
  case typeTripOfferOptionDetailsIdentifier(TripSearch.TripOfferOptionDetailsIdentifier)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferOptionAllOfRelationshipsDetailsDataOneOf, b: TripSearch.OfferOptionAllOfRelationshipsDetailsDataOneOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SelfLinkLinks : Swift.Codable, Swift.Hashable {
  public var _self: Swift.String
  public init(_self: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case _self
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.SelfLinkLinks.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.SelfLinkLinks.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.SelfLinkLinks, b: TripSearch.SelfLinkLinks) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionPenaltyPrice : Swift.Codable, Swift.Hashable {
  public var currency: Swift.String
  public var amount: Swift.String
  public init(currency: Swift.String, amount: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case currency
    case amount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionPenaltyPrice.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionPenaltyPrice.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionPenaltyPrice, b: TripSearch.TripOfferOptionPenaltyPrice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol TripSearchCoordinatorDelegate {
  func allDataSelected(totalPrice: Swift.Double, tripOfferPriceQuote: TripSearch.TripOfferPriceQuote, passengersCount: [TripSearch.Passenger])
}
public struct JourneyIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case journeys
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.JourneyIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.JourneyIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.JourneyIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.JourneyIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.JourneyIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.JourneyIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.JourneyIdentifier, b: TripSearch.JourneyIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetUsersMePreferences200Response : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.Preference]
  public init(data: [TripSearch.Preference])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetUsersMePreferences200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetUsersMePreferences200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetUsersMePreferences200Response, b: TripSearch.GetUsersMePreferences200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UpdatePreferenceAttributes : Swift.Codable, Swift.Hashable {
  public var preferences: [TripSearch.PreferenceAttributes]
  public init(preferences: [TripSearch.PreferenceAttributes])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case preferences
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UpdatePreferenceAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UpdatePreferenceAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UpdatePreferenceAttributes, b: TripSearch.UpdatePreferenceAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var payment: TripSearch.OrderCreatableAllOfRelationshipsPayment
  public var journey: TripSearch.OrderAllOfRelationshipsJourney
  public var bookings: TripSearch.OrderAllOfRelationshipsBookings
  public init(payment: TripSearch.OrderCreatableAllOfRelationshipsPayment, journey: TripSearch.OrderAllOfRelationshipsJourney, bookings: TripSearch.OrderAllOfRelationshipsBookings)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case payment
    case journey
    case bookings
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfRelationships, b: TripSearch.OrderAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTripCandidatesSearchesIdOffers200Response : Swift.Codable, Swift.Hashable {
  public var data: Swift.Array<TripSearch.Offer>
  public var included: [TripSearch.OfferSearchIncludedValue]?
  public var links: TripSearch.NextLinkLinks?
  public init(data: Swift.Array<TripSearch.Offer>, included: [TripSearch.OfferSearchIncludedValue]? = nil, links: TripSearch.NextLinkLinks?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetTripCandidatesSearchesIdOffers200Response, b: TripSearch.GetTripCandidatesSearchesIdOffers200Response) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostGuestsRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.Guest
  public init(data: TripSearch.Guest)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostGuestsRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostGuestsRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostGuestsRequest, b: TripSearch.PostGuestsRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceRelationshipsTypes : Swift.Codable, Swift.Hashable {
  public var data: [TripSearch.PlaceTypeIdentifier]
  public init(data: [TripSearch.PlaceTypeIdentifier])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PlaceRelationshipsTypes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PlaceRelationshipsTypes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PlaceRelationshipsTypes, b: TripSearch.PlaceRelationshipsTypes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LoyaltyProgram : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case loyaltyPrograms
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.LoyaltyProgram.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LoyaltyProgram.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.LoyaltyProgram.ModelType
  public var attributes: TripSearch.LoyaltyProgramAttributes
  public init(id: Swift.String, type: TripSearch.LoyaltyProgram.ModelType, attributes: TripSearch.LoyaltyProgramAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LoyaltyProgram.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LoyaltyProgram.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LoyaltyProgram, b: TripSearch.LoyaltyProgram) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Presentable {
  func thePresentable() -> UIKit.UIViewController
}
extension UIKit.UIViewController : TripSearch.Presentable {
  @_Concurrency.MainActor(unsafe) public func thePresentable() -> UIKit.UIViewController
}
public struct PatchUsersMeRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.ChangePasswordBodyData
  public init(data: TripSearch.ChangePasswordBodyData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PatchUsersMeRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PatchUsersMeRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PatchUsersMeRequest, b: TripSearch.PatchUsersMeRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorSource : Swift.Codable, Swift.Hashable {
  public var pointer: Swift.String
  public init(pointer: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case pointer
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ErrorSource.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ErrorSource.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ErrorSource, b: TripSearch.ErrorSource) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferSegmentLeg : Swift.Codable, Swift.Hashable {
  public var origin: TripSearch.Point
  public var destination: TripSearch.Point
  public var departureAt: Foundation.Date
  public var arrivalAt: Foundation.Date
  public init(origin: TripSearch.Point, destination: TripSearch.Point, departureAt: Foundation.Date, arrivalAt: Foundation.Date)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case origin
    case destination
    case departureAt
    case arrivalAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferSegmentLeg.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferSegmentLeg.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferSegmentLeg, b: TripSearch.OfferSegmentLeg) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GuestsAPI {
  @discardableResult
  open class func postGuests(postGuestsRequest: TripSearch.PostGuestsRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostGuestsRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postGuestsWithRequestBuilder(postGuestsRequest: TripSearch.PostGuestsRequest) -> TripSearch.RequestBuilder<TripSearch.PostGuestsRequest>
  @discardableResult
  open class func postGuestsSessions(postGuestsSessionsRequest: TripSearch.PostGuestsSessionsRequest, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.PostGuestsSessionsRequest?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func postGuestsSessionsWithRequestBuilder(postGuestsSessionsRequest: TripSearch.PostGuestsSessionsRequest) -> TripSearch.RequestBuilder<TripSearch.PostGuestsSessionsRequest>
  @objc deinit
}
public struct PreferenceAttributes : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case boolean
    case integer
    case booleanCollection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PreferenceAttributes.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PreferenceAttributes.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var title: Swift.String?
  public var ref: Swift.String
  public var type: TripSearch.PreferenceAttributes.ModelType?
  public var category: Swift.String?
  public var value: TripSearch.PreferenceAttributesValue
  public init(title: Swift.String? = nil, ref: Swift.String, type: TripSearch.PreferenceAttributes.ModelType? = nil, category: Swift.String? = nil, value: TripSearch.PreferenceAttributesValue)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PreferenceAttributes, b: TripSearch.PreferenceAttributes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerificationCodeAttributes : Swift.Codable, Swift.Hashable {
  public var email: Swift.String
  public init(email: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case email
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.VerificationCodeAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.VerificationCodeAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.VerificationCodeAttributes, b: TripSearch.VerificationCodeAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var order: TripSearch.TripBookingAllOfRelationshipsOrder
  public var status: TripSearch.TripBookingAllOfRelationshipsStatus
  public var details: TripSearch.TripBookingAllOfRelationshipsDetails?
  public init(order: TripSearch.TripBookingAllOfRelationshipsOrder, status: TripSearch.TripBookingAllOfRelationshipsStatus, details: TripSearch.TripBookingAllOfRelationshipsDetails? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case order
    case status
    case details
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingAllOfRelationships, b: TripSearch.TripBookingAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case legs
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.LegAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.LegAllOf.ModelType
  public var attributes: TripSearch.LegAllOfAttributes
  public var relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships
  public init(id: Swift.String, type: TripSearch.LegAllOf.ModelType, attributes: TripSearch.LegAllOfAttributes, relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LegAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LegAllOf, b: TripSearch.LegAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PassengerTitleAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public init(name: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PassengerTitleAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerTitleAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PassengerTitleAllOfAttributes, b: TripSearch.PassengerTitleAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferGroupDetailsAllOfAttributesSequences : Swift.Codable, Swift.Hashable {
  public var trip: Swift.Int
  public var segment: Swift.Int
  public init(trip: Swift.Int, segment: Swift.Int)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case trip
    case segment
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferGroupDetailsAllOfAttributesSequences.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetailsAllOfAttributesSequences.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferGroupDetailsAllOfAttributesSequences, b: TripSearch.TripOfferGroupDetailsAllOfAttributesSequences) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionDetails : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferOptionDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferOptionDetails.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetails.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferOptionDetails.ModelType
  public var attributes: TripSearch.TripOfferOptionDetailsAllOfAttributes
  public var relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.TripOfferOptionDetails.ModelType, attributes: TripSearch.TripOfferOptionDetailsAllOfAttributes, relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionDetails, b: TripSearch.TripOfferOptionDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct JSONDataEncoding {
  public func encode(_ urlRequest: Foundation.URLRequest, with parameters: [Swift.String : Any]?) -> Foundation.URLRequest
  public static func encodingParameters(jsonData: Foundation.Data?) -> [Swift.String : Any]?
}
public struct TripOfferSearch : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferSearches
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferSearch.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferSearch.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.TripOfferSearch.ModelType
  public var attributes: TripSearch.TripOfferSearchAllOfAttributes
  public var relationships: TripSearch.TripOfferSearchAllOfRelationships
  public var links: TripSearch.SelfLinkLinks?
  public init(id: Swift.String? = nil, type: TripSearch.TripOfferSearch.ModelType, attributes: TripSearch.TripOfferSearchAllOfAttributes, relationships: TripSearch.TripOfferSearchAllOfRelationships, links: TripSearch.SelfLinkLinks? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferSearch, b: TripSearch.TripOfferSearch) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Place : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case places
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Place.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Place.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.Place.ModelType?
  public var attributes: TripSearch.PlaceAttributes?
  public var relationships: TripSearch.PlaceRelationships?
  public init(id: Swift.String? = nil, type: TripSearch.Place.ModelType? = nil, attributes: TripSearch.PlaceAttributes? = nil, relationships: TripSearch.PlaceRelationships? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.Place.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Place.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Place, b: TripSearch.Place) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Leg : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case legs
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.Leg.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.Leg.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.Leg.ModelType
  public var attributes: TripSearch.LegAllOfAttributes
  public var relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.Leg.ModelType, attributes: TripSearch.LegAllOfAttributes, relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.Leg, b: TripSearch.Leg) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostUsersSessionsRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.UserSession?
  public init(data: TripSearch.UserSession? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostUsersSessionsRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostUsersSessionsRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostUsersSessionsRequest, b: TripSearch.PostUsersSessionsRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SegmentTypeData : Swift.Codable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.SegmentTypeData, b: TripSearch.SegmentTypeData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferSegmentDetailRule : Swift.Codable, Swift.Hashable {
  public var title: Swift.String
  public var body: Swift.String
  public init(title: Swift.String, body: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case title
    case body
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferSegmentDetailRule.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferSegmentDetailRule.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferSegmentDetailRule, b: TripSearch.OfferSegmentDetailRule) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderPassengerTravelerDocument : Swift.Codable, Swift.Hashable {
  public enum DocumentType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case passport
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OrderPassengerTravelerDocument.DocumentType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderPassengerTravelerDocument.DocumentType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var documentType: TripSearch.OrderPassengerTravelerDocument.DocumentType
  public var documentNumber: Swift.String?
  public var documentIssueCountry: Swift.String?
  public var documentExpirationDate: Swift.String?
  public var nationality: Swift.String?
  public var residenceCountryCode: Swift.String?
  public init(documentType: TripSearch.OrderPassengerTravelerDocument.DocumentType, documentNumber: Swift.String?, documentIssueCountry: Swift.String?, documentExpirationDate: Swift.String?, nationality: Swift.String?, residenceCountryCode: Swift.String?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case documentType
    case documentNumber
    case documentIssueCountry
    case documentExpirationDate
    case nationality
    case residenceCountryCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderPassengerTravelerDocument.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderPassengerTravelerDocument.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderPassengerTravelerDocument, b: TripSearch.OrderPassengerTravelerDocument) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferGroupDetailsAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var legType: TripSearch.TripBookingDetailsAllOfRelationshipsLegType
  public init(legType: TripSearch.TripBookingDetailsAllOfRelationshipsLegType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case legType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferGroupDetailsAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetailsAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferGroupDetailsAllOfRelationships, b: TripSearch.TripOfferGroupDetailsAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferSearchAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferSearches
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferSearchAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferSearchAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferSearchAllOf.ModelType
  public var attributes: TripSearch.TripOfferSearchAllOfAttributes
  public var relationships: TripSearch.TripOfferSearchAllOfRelationships
  public init(id: Swift.String, type: TripSearch.TripOfferSearchAllOf.ModelType, attributes: TripSearch.TripOfferSearchAllOfAttributes, relationships: TripSearch.TripOfferSearchAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferSearchAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferSearchAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferSearchAllOf, b: TripSearch.TripOfferSearchAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferSearchAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var trips: TripSearch.TripOfferSearchAllOfRelationshipsTrips?
  public var offers: TripSearch.TripOfferSearchAllOfRelationshipsOffers?
  public init(trips: TripSearch.TripOfferSearchAllOfRelationshipsTrips?, offers: TripSearch.TripOfferSearchAllOfRelationshipsOffers? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferSearchAllOfRelationships, b: TripSearch.TripOfferSearchAllOfRelationships) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum GetOffersSearchesId200ResponseData : Swift.Codable, Swift.Hashable {
  case typeTripOfferSearch(TripSearch.TripOfferSearch)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOffersSearchesId200ResponseData, b: TripSearch.GetOffersSearchesId200ResponseData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TripBookingDetailsAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var booking: TripSearch.TripBookingDetailsAllOfRelationshipsBooking
  public var cabinClass: TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass
  public var legType: TripSearch.TripBookingDetailsAllOfRelationshipsLegType
  public init(booking: TripSearch.TripBookingDetailsAllOfRelationshipsBooking, cabinClass: TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass, legType: TripSearch.TripBookingDetailsAllOfRelationshipsLegType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case booking
    case cabinClass
    case legType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetailsAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetailsAllOfRelationships, b: TripSearch.TripBookingDetailsAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UILayoutPriority {
  public static var almostRequired: UIKit.UILayoutPriority {
    get
  }
}
extension UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor(unsafe) public func withPriority(_ priority: UIKit.UILayoutPriority) -> UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) public static func activateFullConstraints(for view: UIKit.UIView, insets: UIKit.NSDirectionalEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) public static func fullConstraints(for view: UIKit.UIView, insets: UIKit.NSDirectionalEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor(unsafe) public static func activateFullMarginsConstraints(for view: UIKit.UIView, insets: UIKit.NSDirectionalEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) public static func fullMarginsConstraints(for view: UIKit.UIView, insets: UIKit.NSDirectionalEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor(unsafe) public static func activateCenterConstraints(for view: UIKit.UIView, insets: CoreFoundation.CGPoint = .zero)
  @_Concurrency.MainActor(unsafe) public static func centerConstraints(for view: UIKit.UIView, insets: CoreFoundation.CGPoint = .zero) -> [UIKit.NSLayoutConstraint]
}
public struct TripOfferGroupDetailsIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripOfferGroupDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferGroupDetailsIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetailsIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripOfferGroupDetailsIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.TripOfferGroupDetailsIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferGroupDetailsIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferGroupDetailsIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferGroupDetailsIdentifier, b: TripSearch.TripOfferGroupDetailsIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferGroupIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case offerGroups
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OfferGroupIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.OfferGroupIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.OfferGroupIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OfferGroupIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OfferGroupIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferGroupIdentifier, b: TripSearch.OfferGroupIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetLoyaltyPrograms200Response : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.LoyaltyProgram>
  public var links: TripSearch.NextLinkLinks
  public init(data: Swift.Set<TripSearch.LoyaltyProgram>, links: TripSearch.NextLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetLoyaltyPrograms200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetLoyaltyPrograms200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetLoyaltyPrograms200Response, b: TripSearch.GetLoyaltyPrograms200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct AllowedSegmentTypes : Swift.Codable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.AllowedSegmentTypes, b: TripSearch.AllowedSegmentTypes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripCandidateSearch : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripCandidateSearches
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripCandidateSearch.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripCandidateSearch.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.TripCandidateSearch.ModelType
  public var attributes: TripSearch.TripCandidateSearchAllOfAttributes
  public var relationships: TripSearch.TripCandidateSearchAllOfRelationships?
  public var links: TripSearch.SelfLinkLinks?
  public init(id: Swift.String? = nil, type: TripSearch.TripCandidateSearch.ModelType, attributes: TripSearch.TripCandidateSearchAllOfAttributes, relationships: TripSearch.TripCandidateSearchAllOfRelationships? = nil, links: TripSearch.SelfLinkLinks? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripCandidateSearch, b: TripSearch.TripCandidateSearch) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingDetails : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripBookingDetails
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripBookingDetails.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetails.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripBookingDetails.ModelType
  public var attributes: TripSearch.TripBookingDetailsAllOfAttributes
  public var relationships: TripSearch.TripBookingDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.TripBookingDetails.ModelType, attributes: TripSearch.TripBookingDetailsAllOfAttributes, relationships: TripSearch.TripBookingDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetails, b: TripSearch.TripBookingDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentIntent : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case payments
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PaymentIntent.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PaymentIntent.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.PaymentIntent.ModelType
  public var attributes: TripSearch.PaymentIntentAttributes
  public init(id: Swift.String?, type: TripSearch.PaymentIntent.ModelType, attributes: TripSearch.PaymentIntentAttributes)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PaymentIntent, b: TripSearch.PaymentIntent) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SegmentAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var legs: TripSearch.SegmentAllOfRelationshipsLegs
  public init(legs: TripSearch.SegmentAllOfRelationshipsLegs)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case legs
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.SegmentAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.SegmentAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.SegmentAllOfRelationships, b: TripSearch.SegmentAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case legTypes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.ModelType
  public var attributes: TripSearch.LegTypeAllOfAttributes
  public var relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.ModelType, attributes: TripSearch.LegTypeAllOfAttributes, relationships: TripSearch.TripOfferGroupDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner, b: TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingAllOfRelationshipsStatus : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.BookingStatusIdentifier
  public init(data: TripSearch.BookingStatusIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingAllOfRelationshipsStatus.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingAllOfRelationshipsStatus.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingAllOfRelationshipsStatus, b: TripSearch.TripBookingAllOfRelationshipsStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingDetailsAllOfRelationshipsBooking : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.TripBookingIdentifier
  public init(data: TripSearch.TripBookingIdentifier)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingDetailsAllOfRelationshipsBooking.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingDetailsAllOfRelationshipsBooking.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingDetailsAllOfRelationshipsBooking, b: TripSearch.TripBookingDetailsAllOfRelationshipsBooking) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LoyaltyProgramUserProfile : Swift.Codable, Swift.Hashable {
  public var program: Swift.String
  public var number: Swift.String
  public init(program: Swift.String, number: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case program
    case number
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LoyaltyProgramUserProfile.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LoyaltyProgramUserProfile.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LoyaltyProgramUserProfile, b: TripSearch.LoyaltyProgramUserProfile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetOffersSearchesId200ResponseIncludedInner : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case cabinClasses
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.GetOffersSearchesId200ResponseIncludedInner.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOffersSearchesId200ResponseIncludedInner.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.GetOffersSearchesId200ResponseIncludedInner.ModelType
  public var attributes: TripSearch.CabinClassAllOfAttributes
  public var relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.GetOffersSearchesId200ResponseIncludedInner.ModelType, attributes: TripSearch.CabinClassAllOfAttributes, relationships: TripSearch.TripOfferOptionDetailsAllOfRelationships, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetOffersSearchesId200ResponseIncludedInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetOffersSearchesId200ResponseIncludedInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetOffersSearchesId200ResponseIncludedInner, b: TripSearch.GetOffersSearchesId200ResponseIncludedInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ContactDetails : Swift.Codable, Swift.Hashable {
  public var email: Swift.String?
  public var address: TripSearch.ContactDetailsAddress?
  public var phoneNumber: Swift.String?
  public init(email: Swift.String? = nil, address: TripSearch.ContactDetailsAddress? = nil, phoneNumber: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case email
    case address
    case phoneNumber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.ContactDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.ContactDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.ContactDetails, b: TripSearch.ContactDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CabinClass : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case cabinClasses
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.CabinClass.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.CabinClass.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.CabinClass.ModelType
  public var attributes: TripSearch.CabinClassAllOfAttributes
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.CabinClass.ModelType, attributes: TripSearch.CabinClassAllOfAttributes, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.CabinClass.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.CabinClass.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.CabinClass, b: TripSearch.CabinClass) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserData : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case users
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.UserData.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserData.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: TripSearch.UserData.ModelType
  public var attributes: TripSearch.UserDataAttributes
  public init(type: TripSearch.UserData.ModelType, attributes: TripSearch.UserDataAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.UserData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.UserData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.UserData, b: TripSearch.UserData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegIdentifier : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case legs
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.LegIdentifier.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegIdentifier.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.LegIdentifier.ModelType
  public init(id: Swift.String, type: TripSearch.LegIdentifier.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LegIdentifier.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegIdentifier.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LegIdentifier, b: TripSearch.LegIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class JSONEncodingHelper {
  open class func encodingParameters<T>(forEncodableObject encodableObj: T?) -> [Swift.String : Any]? where T : Swift.Encodable
  open class func encodingParameters(forEncodableObject encodableObj: Any?) -> [Swift.String : Any]?
  @objc deinit
}
public struct GuestSessionRelationshipsGuestData : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case guests
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.GuestSessionRelationshipsGuestData.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GuestSessionRelationshipsGuestData.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.GuestSessionRelationshipsGuestData.ModelType
  public init(id: Swift.String? = nil, type: TripSearch.GuestSessionRelationshipsGuestData.ModelType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GuestSessionRelationshipsGuestData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GuestSessionRelationshipsGuestData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GuestSessionRelationshipsGuestData, b: TripSearch.GuestSessionRelationshipsGuestData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetLoyaltyPrograms200ResponseAllOf : Swift.Codable, Swift.Hashable {
  public var data: Swift.Set<TripSearch.LoyaltyProgram>
  public init(data: Swift.Set<TripSearch.LoyaltyProgram>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetLoyaltyPrograms200ResponseAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetLoyaltyPrograms200ResponseAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetLoyaltyPrograms200ResponseAllOf, b: TripSearch.GetLoyaltyPrograms200ResponseAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderMessage : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case emailMessages
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.OrderMessage.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderMessage.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var type: TripSearch.OrderMessage.ModelType
  public var attributes: TripSearch.OrderMessageAttributes
  public init(id: Swift.String? = nil, type: TripSearch.OrderMessage.ModelType, attributes: TripSearch.OrderMessageAttributes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderMessage.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderMessage.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderMessage, b: TripSearch.OrderMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetHealth200ResponseMeta : Swift.Codable, Swift.Hashable {
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case pass
    case fail
    case warn
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.GetHealth200ResponseMeta.Status]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetHealth200ResponseMeta.Status] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var status: TripSearch.GetHealth200ResponseMeta.Status
  public init(status: TripSearch.GetHealth200ResponseMeta.Status)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.GetHealth200ResponseMeta.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.GetHealth200ResponseMeta.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.GetHealth200ResponseMeta, b: TripSearch.GetHealth200ResponseMeta) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripOfferOptionPenalty : Swift.Codable, Swift.Hashable {
  public enum PenaltyType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case exchange
    case refund
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferOptionPenalty.PenaltyType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionPenalty.PenaltyType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Applicability : Swift.String, Swift.Codable, Swift.CaseIterable {
    case before
    case after
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripOfferOptionPenalty.Applicability]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionPenalty.Applicability] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var applicableTo: TripSearch.ApplicableTo
  public var penaltyType: TripSearch.TripOfferOptionPenalty.PenaltyType
  public var changeable: Swift.Bool?
  public var refundable: Swift.Bool
  public var applicability: TripSearch.TripOfferOptionPenalty.Applicability
  public var price: TripSearch.TripOfferOptionPenaltyPrice?
  public init(applicableTo: TripSearch.ApplicableTo, penaltyType: TripSearch.TripOfferOptionPenalty.PenaltyType, changeable: Swift.Bool? = nil, refundable: Swift.Bool, applicability: TripSearch.TripOfferOptionPenalty.Applicability, price: TripSearch.TripOfferOptionPenaltyPrice?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case applicableTo
    case penaltyType
    case changeable
    case refundable
    case applicability
    case price
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripOfferOptionPenalty.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripOfferOptionPenalty.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripOfferOptionPenalty, b: TripSearch.TripOfferOptionPenalty) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class LoyaltyAPI {
  @discardableResult
  open class func getLoyaltyPrograms(pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, queryName: Swift.String? = nil, apiResponseQueue: Dispatch.DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TripSearch.GetLoyaltyPrograms200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> TripSearch.RequestTask
  open class func getLoyaltyProgramsWithRequestBuilder(pageCursor: Swift.String? = nil, pageLimit: Swift.Int? = nil, queryName: Swift.String? = nil) -> TripSearch.RequestBuilder<TripSearch.GetLoyaltyPrograms200Response>
  @objc deinit
}
public struct TripSearchAllOfRelationships : Swift.Codable, Swift.Hashable {
  public var origin: TripSearch.TripSearchAllOfRelationshipsOrigin
  public var destination: TripSearch.TripSearchAllOfRelationshipsOrigin
  public var allowedSegmentTypes: TripSearch.AllowedSegmentTypes?
  public init(origin: TripSearch.TripSearchAllOfRelationshipsOrigin, destination: TripSearch.TripSearchAllOfRelationshipsOrigin, allowedSegmentTypes: TripSearch.AllowedSegmentTypes?)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case origin
    case destination
    case allowedSegmentTypes
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripSearchAllOfRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripSearchAllOfRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripSearchAllOfRelationships, b: TripSearch.TripSearchAllOfRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OfferOptionAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var price: TripSearch.Price
  public var brandName: Swift.String
  public var baggageAllowances: [TripSearch.TripOfferOptionPenaltyBaggageAllowance]
  public init(price: TripSearch.Price, brandName: Swift.String, baggageAllowances: [TripSearch.TripOfferOptionPenaltyBaggageAllowance])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OfferOptionAllOfAttributes, b: TripSearch.OfferOptionAllOfAttributes) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripBookingAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case tripBookings
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.TripBookingAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.TripBookingAllOf.ModelType
  public var attributes: TripSearch.TripBookingAllOfAttributes
  public var relationships: TripSearch.TripBookingAllOfRelationships
  public init(id: Swift.String, type: TripSearch.TripBookingAllOf.ModelType, attributes: TripSearch.TripBookingAllOfAttributes, relationships: TripSearch.TripBookingAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.TripBookingAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.TripBookingAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.TripBookingAllOf, b: TripSearch.TripBookingAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LegTypeAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public init(name: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.LegTypeAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.LegTypeAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.LegTypeAllOfAttributes, b: TripSearch.LegTypeAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum CornerRadiusStyle {
  case automatic
  case constant(CoreFoundation.CGFloat)
}
extension QuartzCore.CALayer {
  public func applyCornerRadiusStyle(_ style: TripSearch.CornerRadiusStyle)
}
public struct NextLink : Swift.Codable, Swift.Hashable {
  public var links: TripSearch.NextLinkLinks
  public init(links: TripSearch.NextLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.NextLink.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.NextLink.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.NextLink, b: TripSearch.NextLink) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceRelationships : Swift.Codable, Swift.Hashable {
  public var types: TripSearch.PlaceRelationshipsTypes
  public init(types: TripSearch.PlaceRelationshipsTypes)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case types
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PlaceRelationships.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PlaceRelationships.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PlaceRelationships, b: TripSearch.PlaceRelationships) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderAllOfAttributes : Swift.Codable, Swift.Hashable {
  public var passengers: Swift.Set<TripSearch.OrderPassenger>
  public init(passengers: Swift.Set<TripSearch.OrderPassenger>)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case passengers
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.OrderAllOfAttributes.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.OrderAllOfAttributes.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.OrderAllOfAttributes, b: TripSearch.OrderAllOfAttributes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PassengerGender : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case passengerGenders
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.PassengerGender.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerGender.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.PassengerGender.ModelType
  public var attributes: TripSearch.PassengerGenderAllOfAttributes
  public var links: TripSearch.SelfLinkLinks
  public init(id: Swift.String, type: TripSearch.PassengerGender.ModelType, attributes: TripSearch.PassengerGenderAllOfAttributes, links: TripSearch.SelfLinkLinks)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case links
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PassengerGender.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PassengerGender.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PassengerGender, b: TripSearch.PassengerGender) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Restaurant : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Size : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProfilePhoto : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostOffersSearchesRequest : Swift.Codable, Swift.Hashable {
  public var data: TripSearch.TripOfferSearch
  public init(data: TripSearch.TripOfferSearch)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.PostOffersSearchesRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.PostOffersSearchesRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.PostOffersSearchesRequest, b: TripSearch.PostOffersSearchesRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct JourneyAllOf : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case journeys
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TripSearch.JourneyAllOf.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.JourneyAllOf.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var type: TripSearch.JourneyAllOf.ModelType
  public var attributes: TripSearch.JourneyAllOfAttributes
  public var relationships: TripSearch.JourneyAllOfRelationships
  public init(id: Swift.String, type: TripSearch.JourneyAllOf.ModelType, attributes: TripSearch.JourneyAllOfAttributes, relationships: TripSearch.JourneyAllOfRelationships)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case type
    case attributes
    case relationships
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [TripSearch.JourneyAllOf.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [TripSearch.JourneyAllOf.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TripSearch.JourneyAllOf, b: TripSearch.JourneyAllOf) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension TripSearch.OfferAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetailsAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetailsAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetailsAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetUsersGroups200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetUsersGroups200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetUsersGroups200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferGroupAllOfRelationshipsOptions.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferGroupAllOfRelationshipsOptions.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferGroupAllOfRelationshipsOptions.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Journey.ModelType : Swift.Equatable {}
extension TripSearch.Journey.ModelType : Swift.Hashable {}
extension TripSearch.Journey.ModelType : Swift.RawRepresentable {}
extension TripSearch.Journey.CodingKeys : Swift.Equatable {}
extension TripSearch.Journey.CodingKeys : Swift.Hashable {}
extension TripSearch.Journey.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferOptionIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.OfferOptionIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.OfferOptionIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferOptionIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferOptionIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferOptionIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.DownloadException : Swift.Equatable {}
extension TripSearch.DownloadException : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.Required : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.Required : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.Required : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.Status : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.Status : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.Status : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetPlaces200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetPlaces200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetPlaces200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferGroupAllOfRelationshipsDetails.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferGroupAllOfRelationshipsDetails.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferGroupAllOfRelationshipsDetails.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.TripBookingDetailsIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.TripBookingDetailsIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetailsIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetailsIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PlaceAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.PlaceAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.PlaceAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GuestSessionRelationshipsGuest.CodingKeys : Swift.Equatable {}
extension TripSearch.GuestSessionRelationshipsGuest.CodingKeys : Swift.Hashable {}
extension TripSearch.GuestSessionRelationshipsGuest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripSearchAllOf.ModelType : Swift.Equatable {}
extension TripSearch.TripSearchAllOf.ModelType : Swift.Hashable {}
extension TripSearch.TripSearchAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripSearchAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.TripSearchAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.TripSearchAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.VerificationCode.ModelType : Swift.Equatable {}
extension TripSearch.VerificationCode.ModelType : Swift.Hashable {}
extension TripSearch.VerificationCode.ModelType : Swift.RawRepresentable {}
extension TripSearch.VerificationCode.CodingKeys : Swift.Equatable {}
extension TripSearch.VerificationCode.CodingKeys : Swift.Hashable {}
extension TripSearch.VerificationCode.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripSearchAllOfRelationshipsOrigin.CodingKeys : Swift.Equatable {}
extension TripSearch.TripSearchAllOfRelationshipsOrigin.CodingKeys : Swift.Hashable {}
extension TripSearch.TripSearchAllOfRelationshipsOrigin.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GuestSessionRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.GuestSessionRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.GuestSessionRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Offer.ModelType : Swift.Equatable {}
extension TripSearch.Offer.ModelType : Swift.Hashable {}
extension TripSearch.Offer.ModelType : Swift.RawRepresentable {}
extension TripSearch.Offer.CodingKeys : Swift.Equatable {}
extension TripSearch.Offer.CodingKeys : Swift.Hashable {}
extension TripSearch.Offer.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsAllOf.ModelType : Swift.Equatable {}
extension TripSearch.TripBookingDetailsAllOf.ModelType : Swift.Hashable {}
extension TripSearch.TripBookingDetailsAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetailsAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetailsAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBooking.Status : Swift.Equatable {}
extension TripSearch.TripBooking.Status : Swift.Hashable {}
extension TripSearch.TripBooking.Status : Swift.RawRepresentable {}
extension TripSearch.SegementType : Swift.Equatable {}
extension TripSearch.SegementType : Swift.Hashable {}
extension TripSearch.SegementType : Swift.RawRepresentable {}
extension TripSearch.SelectorType : Swift.Equatable {}
extension TripSearch.SelectorType : Swift.Hashable {}
extension TripSearch.SelectorType : Swift.RawRepresentable {}
extension TripSearch.TripAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.TripAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.TripAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PatchUsersMePreferencesRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PatchUsersMePreferencesRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PatchUsersMePreferencesRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.TripIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.TripIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.TripIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.TripIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GuestSession.ModelType : Swift.Equatable {}
extension TripSearch.GuestSession.ModelType : Swift.Hashable {}
extension TripSearch.GuestSession.ModelType : Swift.RawRepresentable {}
extension TripSearch.GuestSession.CodingKeys : Swift.Equatable {}
extension TripSearch.GuestSession.CodingKeys : Swift.Hashable {}
extension TripSearch.GuestSession.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Point.CodingKeys : Swift.Equatable {}
extension TripSearch.Point.CodingKeys : Swift.Hashable {}
extension TripSearch.Point.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroupRelationshipsMembers.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroupRelationshipsMembers.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroupRelationshipsMembers.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetailsAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetailsAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetailsAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationshipsOffer.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroupMemberAllOf.ModelType : Swift.Equatable {}
extension TripSearch.UserGroupMemberAllOf.ModelType : Swift.Hashable {}
extension TripSearch.UserGroupMemberAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserGroupMemberAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroupMemberAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroupMemberAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserProfileAttributes.Gender : Swift.Equatable {}
extension TripSearch.UserProfileAttributes.Gender : Swift.Hashable {}
extension TripSearch.UserProfileAttributes.Gender : Swift.RawRepresentable {}
extension TripSearch.UserProfileAttributes.Title : Swift.Equatable {}
extension TripSearch.UserProfileAttributes.Title : Swift.Hashable {}
extension TripSearch.UserProfileAttributes.Title : Swift.RawRepresentable {}
extension TripSearch.UserProfileAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.UserProfileAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.UserProfileAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroupAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroupAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroupAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetOffersSearchesIdOffers200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetOffersSearchesIdOffers200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetOffersSearchesIdOffers200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripCandidateSearchAllOfAttributes.Status : Swift.Equatable {}
extension TripSearch.TripCandidateSearchAllOfAttributes.Status : Swift.Hashable {}
extension TripSearch.TripCandidateSearchAllOfAttributes.Status : Swift.RawRepresentable {}
extension TripSearch.PostUsersGroupsIdMembersRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostUsersGroupsIdMembersRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostUsersGroupsIdMembersRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetailsAllOfRelationshipsDetails.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.SelfLink.CodingKeys : Swift.Equatable {}
extension TripSearch.SelfLink.CodingKeys : Swift.Hashable {}
extension TripSearch.SelfLink.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserSessionAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.UserSessionAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.UserSessionAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOfRelationshipsOptions.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOfRelationshipsOptions.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOfRelationshipsOptions.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.RecentSearchViewModel.CodingKeys : Swift.Equatable {}
extension TripSearch.RecentSearchViewModel.CodingKeys : Swift.Hashable {}
extension TripSearch.RecentSearchViewModel.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferOptionAllOf.ModelType : Swift.Equatable {}
extension TripSearch.OfferOptionAllOf.ModelType : Swift.Hashable {}
extension TripSearch.OfferOptionAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferOptionAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferOptionAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferOptionAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBooking.ModelType : Swift.Equatable {}
extension TripSearch.TripBooking.ModelType : Swift.Hashable {}
extension TripSearch.TripBooking.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripBooking.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBooking.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBooking.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.TripBookingIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.TripBookingIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripBookingIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroupMemberAllOf1.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroupMemberAllOf1.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroupMemberAllOf1.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PaymentIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.PaymentIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.PaymentIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.PaymentIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.PaymentIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.PaymentIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferSearchAllOfRelationshipsTrips.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferSearchAllOfRelationshipsTrips.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferSearchAllOfRelationshipsTrips.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderPassenger.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderPassenger.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderPassenger.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripsAPI.Include_getTripCandidatesSearchesIdOffers : Swift.Equatable {}
extension TripSearch.TripsAPI.Include_getTripCandidatesSearchesIdOffers : Swift.Hashable {}
extension TripSearch.TripsAPI.Include_getTripCandidatesSearchesIdOffers : Swift.RawRepresentable {}
extension TripSearch.TripsAPI.Sort_getTripCandidatesSearchesIdOffers : Swift.Equatable {}
extension TripSearch.TripsAPI.Sort_getTripCandidatesSearchesIdOffers : Swift.Hashable {}
extension TripSearch.TripsAPI.Sort_getTripCandidatesSearchesIdOffers : Swift.RawRepresentable {}
extension TripSearch.TripsAPI.Include_getTripsSearchesIdTrips : Swift.Equatable {}
extension TripSearch.TripsAPI.Include_getTripsSearchesIdTrips : Swift.Hashable {}
extension TripSearch.TripsAPI.Include_getTripsSearchesIdTrips : Swift.RawRepresentable {}
extension TripSearch.ChangePasswordBody.CodingKeys : Swift.Equatable {}
extension TripSearch.ChangePasswordBody.CodingKeys : Swift.Hashable {}
extension TripSearch.ChangePasswordBody.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripAllOfRelationshipsSegments.CodingKeys : Swift.Equatable {}
extension TripSearch.TripAllOfRelationshipsSegments.CodingKeys : Swift.Hashable {}
extension TripSearch.TripAllOfRelationshipsSegments.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.ApplicableTo.CodingKeys : Swift.Equatable {}
extension TripSearch.ApplicableTo.CodingKeys : Swift.Hashable {}
extension TripSearch.ApplicableTo.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.NextLinkLinks.CodingKeys : Swift.Equatable {}
extension TripSearch.NextLinkLinks.CodingKeys : Swift.Hashable {}
extension TripSearch.NextLinkLinks.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostPayments200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.PostPayments200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.PostPayments200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferOption.ModelType : Swift.Equatable {}
extension TripSearch.OfferOption.ModelType : Swift.Hashable {}
extension TripSearch.OfferOption.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferOption.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferOption.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferOption.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetails.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetails.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetails.ModelType : Swift.RawRepresentable {}
extension TripSearch.OrderIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.OrderIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.OrderIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.OrderIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOfRelationshipsOffer.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOfRelationshipsOffer.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOfRelationshipsOffer.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LoyaltyCard.CodingKeys : Swift.Equatable {}
extension TripSearch.LoyaltyCard.CodingKeys : Swift.Hashable {}
extension TripSearch.LoyaltyCard.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LegTypeAllOf.ModelType : Swift.Equatable {}
extension TripSearch.LegTypeAllOf.ModelType : Swift.Hashable {}
extension TripSearch.LegTypeAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.LegTypeAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.LegTypeAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.LegTypeAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroupMember.ModelType : Swift.Equatable {}
extension TripSearch.UserGroupMember.ModelType : Swift.Hashable {}
extension TripSearch.UserGroupMember.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserGroupMember.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroupMember.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroupMember.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Coordinates.CodingKeys : Swift.Equatable {}
extension TripSearch.Coordinates.CodingKeys : Swift.Hashable {}
extension TripSearch.Coordinates.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroupMemberIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.UserGroupMemberIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.UserGroupMemberIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserGroupMemberIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroupMemberIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroupMemberIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OffersAPI.Include_getOffersSearchesId : Swift.Equatable {}
extension TripSearch.OffersAPI.Include_getOffersSearchesId : Swift.Hashable {}
extension TripSearch.OffersAPI.Include_getOffersSearchesId : Swift.RawRepresentable {}
extension TripSearch.OffersAPI.Include_getOffersSearchesIdOffers : Swift.Equatable {}
extension TripSearch.OffersAPI.Include_getOffersSearchesIdOffers : Swift.Hashable {}
extension TripSearch.OffersAPI.Include_getOffersSearchesIdOffers : Swift.RawRepresentable {}
extension TripSearch.TravelersCount.CodingKeys : Swift.Equatable {}
extension TripSearch.TravelersCount.CodingKeys : Swift.Hashable {}
extension TripSearch.TravelersCount.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferGroupAllOfAttributes.Required : Swift.Equatable {}
extension TripSearch.OfferGroupAllOfAttributes.Required : Swift.Hashable {}
extension TripSearch.OfferGroupAllOfAttributes.Required : Swift.RawRepresentable {}
extension TripSearch.OfferGroupAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferGroupAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferGroupAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionPenaltyBaggageAllowance.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionPenaltyBaggageAllowance.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionPenaltyBaggageAllowance.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserUpdatableAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.UserUpdatableAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.UserUpdatableAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostOffersQuotesRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostOffersQuotesRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostOffersQuotesRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferSegmentDetailAmenities.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferSegmentDetailAmenities.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferSegmentDetailAmenities.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.JourneyAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.JourneyAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.JourneyAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PassengerTitle.ModelType : Swift.Equatable {}
extension TripSearch.PassengerTitle.ModelType : Swift.Hashable {}
extension TripSearch.PassengerTitle.ModelType : Swift.RawRepresentable {}
extension TripSearch.PassengerTitle.CodingKeys : Swift.Equatable {}
extension TripSearch.PassengerTitle.CodingKeys : Swift.Hashable {}
extension TripSearch.PassengerTitle.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserUpdatable.ModelType : Swift.Equatable {}
extension TripSearch.UserUpdatable.ModelType : Swift.Hashable {}
extension TripSearch.UserUpdatable.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserUpdatable.CodingKeys : Swift.Equatable {}
extension TripSearch.UserUpdatable.CodingKeys : Swift.Hashable {}
extension TripSearch.UserUpdatable.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner.ModelType : Swift.Equatable {}
extension TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner.ModelType : Swift.Hashable {}
extension TripSearch.GetTripCandidatesSearchesIdOffers200ResponseAllOfIncludedInner.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripSearch.ModelType : Swift.Equatable {}
extension TripSearch.TripSearch.ModelType : Swift.Hashable {}
extension TripSearch.TripSearch.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetailsAllOf.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetailsAllOf.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetailsAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetailsAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetailsAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetailsAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetailsIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetailsIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetailsIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetailsIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetailsIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetailsIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingAllOfRelationshipsDetails.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingAllOfRelationshipsDetails.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingAllOfRelationshipsDetails.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostVerificationCodeRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostVerificationCodeRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostVerificationCodeRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderCreatableAllOfRelationshipsVoucher.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderCreatableAllOfRelationshipsVoucher.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderCreatableAllOfRelationshipsVoucher.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroup.ModelType : Swift.Equatable {}
extension TripSearch.UserGroup.ModelType : Swift.Hashable {}
extension TripSearch.UserGroup.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserGroup.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroup.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroup.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.ContactDetailsAddress.CodingKeys : Swift.Equatable {}
extension TripSearch.ContactDetailsAddress.CodingKeys : Swift.Hashable {}
extension TripSearch.ContactDetailsAddress.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferSegmentDetailAmenity.Availability : Swift.Equatable {}
extension TripSearch.OfferSegmentDetailAmenity.Availability : Swift.Hashable {}
extension TripSearch.OfferSegmentDetailAmenity.Availability : Swift.RawRepresentable {}
extension TripSearch.OfferSegmentDetailAmenity.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferSegmentDetailAmenity.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferSegmentDetailAmenity.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuote.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuote.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuote.ModelType : Swift.RawRepresentable {}
extension TripSearch.PatchUsersIdRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PatchUsersIdRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PatchUsersIdRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostUsersGroupsRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostUsersGroupsRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostUsersGroupsRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferAllOf.ModelType : Swift.Equatable {}
extension TripSearch.OfferAllOf.ModelType : Swift.Hashable {}
extension TripSearch.OfferAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripSearchAllOfAttributes.Status : Swift.Equatable {}
extension TripSearch.TripSearchAllOfAttributes.Status : Swift.Hashable {}
extension TripSearch.TripSearchAllOfAttributes.Status : Swift.RawRepresentable {}
extension TripSearch.VoucherIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.VoucherIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.VoucherIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.VoucherIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.VoucherIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.VoucherIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Passenger.CodingKeys : Swift.Equatable {}
extension TripSearch.Passenger.CodingKeys : Swift.Hashable {}
extension TripSearch.Passenger.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetailsAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetailsAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PassengersAPI.Sort_getPassengersGenders : Swift.Equatable {}
extension TripSearch.PassengersAPI.Sort_getPassengersGenders : Swift.Hashable {}
extension TripSearch.PassengersAPI.Sort_getPassengersGenders : Swift.RawRepresentable {}
extension TripSearch.PassengersAPI.Sort_getPassengersTitles : Swift.Equatable {}
extension TripSearch.PassengersAPI.Sort_getPassengersTitles : Swift.Hashable {}
extension TripSearch.PassengersAPI.Sort_getPassengersTitles : Swift.RawRepresentable {}
extension TripSearch.GetPassengersGenders200ResponseAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.GetPassengersGenders200ResponseAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.GetPassengersGenders200ResponseAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrdersAPI.Include_getOrders : Swift.Equatable {}
extension TripSearch.OrdersAPI.Include_getOrders : Swift.Hashable {}
extension TripSearch.OrdersAPI.Include_getOrders : Swift.RawRepresentable {}
extension TripSearch.OrdersAPI.Include_getOrdersId : Swift.Equatable {}
extension TripSearch.OrdersAPI.Include_getOrdersId : Swift.Hashable {}
extension TripSearch.OrdersAPI.Include_getOrdersId : Swift.RawRepresentable {}
extension TripSearch.TravelerDocument.DocumentType : Swift.Equatable {}
extension TripSearch.TravelerDocument.DocumentType : Swift.Hashable {}
extension TripSearch.TravelerDocument.DocumentType : Swift.RawRepresentable {}
extension TripSearch.TravelerDocument.CodingKeys : Swift.Equatable {}
extension TripSearch.TravelerDocument.CodingKeys : Swift.Hashable {}
extension TripSearch.TravelerDocument.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferGroup.ModelType : Swift.Equatable {}
extension TripSearch.OfferGroup.ModelType : Swift.Hashable {}
extension TripSearch.OfferGroup.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferGroup.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferGroup.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferGroup.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsCabinClass.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LegAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.LegAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.LegAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserProfileDataAttributes.Gender : Swift.Equatable {}
extension TripSearch.UserProfileDataAttributes.Gender : Swift.Hashable {}
extension TripSearch.UserProfileDataAttributes.Gender : Swift.RawRepresentable {}
extension TripSearch.UserProfileDataAttributes.Title : Swift.Equatable {}
extension TripSearch.UserProfileDataAttributes.Title : Swift.Hashable {}
extension TripSearch.UserProfileDataAttributes.Title : Swift.RawRepresentable {}
extension TripSearch.UserProfileDataAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.UserProfileDataAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.UserProfileDataAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostPaymentsRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostPaymentsRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostPaymentsRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.ChangePasswordBodyDataAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.ChangePasswordBodyDataAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.ChangePasswordBodyDataAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserGroupRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.UserGroupRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.UserGroupRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsLegType.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsLegType.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsLegType.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderCreatableAllOfRelationshipsPayment.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderCreatableAllOfRelationshipsPayment.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderCreatableAllOfRelationshipsPayment.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PassengerGenderAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.PassengerGenderAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.PassengerGenderAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderCreatableAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderCreatableAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderCreatableAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostTripsSearches422Response.CodingKeys : Swift.Equatable {}
extension TripSearch.PostTripsSearches422Response.CodingKeys : Swift.Hashable {}
extension TripSearch.PostTripsSearches422Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserOwn.CodingKeys : Swift.Equatable {}
extension TripSearch.UserOwn.CodingKeys : Swift.Hashable {}
extension TripSearch.UserOwn.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetOrdersId200ResponseAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.GetOrdersId200ResponseAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.GetOrdersId200ResponseAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderCreatable.ModelType : Swift.Equatable {}
extension TripSearch.OrderCreatable.ModelType : Swift.Hashable {}
extension TripSearch.OrderCreatable.ModelType : Swift.RawRepresentable {}
extension TripSearch.OrderCreatable.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderCreatable.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderCreatable.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostTripsSearches400Response.CodingKeys : Swift.Equatable {}
extension TripSearch.PostTripsSearches400Response.CodingKeys : Swift.Hashable {}
extension TripSearch.PostTripsSearches400Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1.CodingKeys : Swift.Equatable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1.CodingKeys : Swift.Hashable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferGroupAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferGroupAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferGroupAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserProfile.CodingKeys : Swift.Equatable {}
extension TripSearch.UserProfile.CodingKeys : Swift.Hashable {}
extension TripSearch.UserProfile.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOfRelationshipsQuote.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOfRelationshipsQuote.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOfRelationshipsQuote.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.BookingStatusIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.BookingStatusIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.BookingStatusIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.BookingStatusIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.BookingStatusIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.BookingStatusIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetPassengersGenders200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetPassengersGenders200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetPassengersGenders200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostOrdersIdMessagesRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostOrdersIdMessagesRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostOrdersIdMessagesRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Order.ModelType : Swift.Equatable {}
extension TripSearch.Order.ModelType : Swift.Hashable {}
extension TripSearch.Order.ModelType : Swift.RawRepresentable {}
extension TripSearch.Order.CodingKeys : Swift.Equatable {}
extension TripSearch.Order.CodingKeys : Swift.Hashable {}
extension TripSearch.Order.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingAllOfRelationshipsOrder.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingAllOfRelationshipsOrder.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingAllOfRelationshipsOrder.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetHealth200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetHealth200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetHealth200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.OfferIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.OfferIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.ModelType : Swift.Equatable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.ModelType : Swift.Hashable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.ModelType : Swift.RawRepresentable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.CodingKeys : Swift.Equatable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.CodingKeys : Swift.Hashable {}
extension TripSearch.GetOffersSearchesIdOffers200ResponseAllOfIncludedInner.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.RouteIdentifiers.CodingKeys : Swift.Equatable {}
extension TripSearch.RouteIdentifiers.CodingKeys : Swift.Hashable {}
extension TripSearch.RouteIdentifiers.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferGroupAllOf.ModelType : Swift.Equatable {}
extension TripSearch.OfferGroupAllOf.ModelType : Swift.Hashable {}
extension TripSearch.OfferGroupAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferGroupAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferGroupAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferGroupAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetPlacesId200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetPlacesId200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetPlacesId200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LoyaltyProgramAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.LoyaltyProgramAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.LoyaltyProgramAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferSearchAllOfRelationshipsOffers.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferSearchAllOfRelationshipsOffers.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferSearchAllOfRelationshipsOffers.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserSession.ModelType : Swift.Equatable {}
extension TripSearch.UserSession.ModelType : Swift.Hashable {}
extension TripSearch.UserSession.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserSession.CodingKeys : Swift.Equatable {}
extension TripSearch.UserSession.CodingKeys : Swift.Hashable {}
extension TripSearch.UserSession.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Price.CodingKeys : Swift.Equatable {}
extension TripSearch.Price.CodingKeys : Swift.Hashable {}
extension TripSearch.Price.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetPassengersTitles200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetPassengersTitles200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetPassengersTitles200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LegType.ModelType : Swift.Equatable {}
extension TripSearch.LegType.ModelType : Swift.Hashable {}
extension TripSearch.LegType.ModelType : Swift.RawRepresentable {}
extension TripSearch.LegType.CodingKeys : Swift.Equatable {}
extension TripSearch.LegType.CodingKeys : Swift.Hashable {}
extension TripSearch.LegType.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GuestAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.GuestAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.GuestAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Storyboard : Swift.Equatable {}
extension TripSearch.Storyboard : Swift.Hashable {}
extension TripSearch.Storyboard : Swift.RawRepresentable {}
extension TripSearch.OfferOptionAllOfRelationshipsDetails.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferOptionAllOfRelationshipsDetails.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferOptionAllOfRelationshipsDetails.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteAllOfRelationshipsOptions.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetPassengersTitles200ResponseAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.GetPassengersTitles200ResponseAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.GetPassengersTitles200ResponseAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferOptionAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferOptionAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferOptionAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Guest.ModelType : Swift.Equatable {}
extension TripSearch.Guest.ModelType : Swift.Hashable {}
extension TripSearch.Guest.ModelType : Swift.RawRepresentable {}
extension TripSearch.Guest.CodingKeys : Swift.Equatable {}
extension TripSearch.Guest.CodingKeys : Swift.Hashable {}
extension TripSearch.Guest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserDataAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.UserDataAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.UserDataAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostTripsSearchesRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostTripsSearchesRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostTripsSearchesRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PassengerGenderAllOf.ModelType : Swift.Equatable {}
extension TripSearch.PassengerGenderAllOf.ModelType : Swift.Hashable {}
extension TripSearch.PassengerGenderAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.PassengerGenderAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.PassengerGenderAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.PassengerGenderAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.CabinClassAllOf.ModelType : Swift.Equatable {}
extension TripSearch.CabinClassAllOf.ModelType : Swift.Hashable {}
extension TripSearch.CabinClassAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.CabinClassAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.CabinClassAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.CabinClassAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Segment.ModelType : Swift.Equatable {}
extension TripSearch.Segment.ModelType : Swift.Hashable {}
extension TripSearch.Segment.ModelType : Swift.RawRepresentable {}
extension TripSearch.LegTypeIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.LegTypeIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.LegTypeIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.LegTypeIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.LegTypeIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.LegTypeIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOfRelationshipsJourney.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOfRelationshipsJourney.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOfRelationshipsJourney.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetOffersSearchesId200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetOffersSearchesId200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetOffersSearchesId200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetUsersGroupsId200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetUsersGroupsId200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetUsersGroupsId200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.CabinClassAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.CabinClassAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.CabinClassAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.JourneyAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.JourneyAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.JourneyAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.SegmentIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.SegmentIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.SegmentIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.SegmentIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.SegmentIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.SegmentIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostOrdersRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostOrdersRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostOrdersRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Trip.ModelType : Swift.Equatable {}
extension TripSearch.Trip.ModelType : Swift.Hashable {}
extension TripSearch.Trip.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes.CodingKeys : Swift.Equatable {}
extension TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes.CodingKeys : Swift.Hashable {}
extension TripSearch.TripSearchAllOfRelationshipsAllowedSegmentTypes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferAllOfRelationshipsGroups.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferAllOfRelationshipsGroups.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferAllOfRelationshipsGroups.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.ModelError.CodingKeys : Swift.Equatable {}
extension TripSearch.ModelError.CodingKeys : Swift.Hashable {}
extension TripSearch.ModelError.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.JourneyAllOfRelationshipsOrders.CodingKeys : Swift.Equatable {}
extension TripSearch.JourneyAllOfRelationshipsOrders.CodingKeys : Swift.Hashable {}
extension TripSearch.JourneyAllOfRelationshipsOrders.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.ChangePasswordBodyData.ModelType : Swift.Equatable {}
extension TripSearch.ChangePasswordBodyData.ModelType : Swift.Hashable {}
extension TripSearch.ChangePasswordBodyData.ModelType : Swift.RawRepresentable {}
extension TripSearch.ChangePasswordBodyData.CodingKeys : Swift.Equatable {}
extension TripSearch.ChangePasswordBodyData.CodingKeys : Swift.Hashable {}
extension TripSearch.ChangePasswordBodyData.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderMessageAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderMessageAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderMessageAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetailsAllOf.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetailsAllOf.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetailsAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetailsAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetailsAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetailsAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOfRelationshipsBookings.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOfRelationshipsBookings.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOfRelationshipsBookings.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PlaceTypeIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.PlaceTypeIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.PlaceTypeIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.PlaceTypeIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.PlaceTypeIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.PlaceTypeIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuoteIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferPriceQuoteIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferPriceQuoteIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferPriceQuoteIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostGuestsSessionsRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostGuestsSessionsRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostGuestsSessionsRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserProfileData.ModelType : Swift.Equatable {}
extension TripSearch.UserProfileData.ModelType : Swift.Hashable {}
extension TripSearch.UserProfileData.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserProfileData.CodingKeys : Swift.Equatable {}
extension TripSearch.UserProfileData.CodingKeys : Swift.Hashable {}
extension TripSearch.UserProfileData.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UpdatePreference.ModelType : Swift.Equatable {}
extension TripSearch.UpdatePreference.ModelType : Swift.Hashable {}
extension TripSearch.UpdatePreference.ModelType : Swift.RawRepresentable {}
extension TripSearch.CabinClassIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.CabinClassIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.CabinClassIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.CabinClassIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.CabinClassIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.CabinClassIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.SegmentAllOfRelationshipsLegs.CodingKeys : Swift.Equatable {}
extension TripSearch.SegmentAllOfRelationshipsLegs.CodingKeys : Swift.Hashable {}
extension TripSearch.SegmentAllOfRelationshipsLegs.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostGuests400Response.CodingKeys : Swift.Equatable {}
extension TripSearch.PostGuests400Response.CodingKeys : Swift.Hashable {}
extension TripSearch.PostGuests400Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Preference.ModelType : Swift.Equatable {}
extension TripSearch.Preference.ModelType : Swift.Hashable {}
extension TripSearch.Preference.ModelType : Swift.RawRepresentable {}
extension TripSearch.Preference.CodingKeys : Swift.Equatable {}
extension TripSearch.Preference.CodingKeys : Swift.Hashable {}
extension TripSearch.Preference.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetUsersGroupsIdMembers200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetUsersGroupsIdMembers200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetUsersGroupsIdMembers200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetUsersGroups400Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetUsersGroups400Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetUsersGroups400Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripSearchAllOfRelationshipsLegTypes.CodingKeys : Swift.Equatable {}
extension TripSearch.TripSearchAllOfRelationshipsLegTypes.CodingKeys : Swift.Hashable {}
extension TripSearch.TripSearchAllOfRelationshipsLegTypes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PassengerTitleAllOf.ModelType : Swift.Equatable {}
extension TripSearch.PassengerTitleAllOf.ModelType : Swift.Hashable {}
extension TripSearch.PassengerTitleAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.PassengerTitleAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.PassengerTitleAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.PassengerTitleAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetTripsSearchesIdTrips200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetTripsSearchesIdTrips200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetTripsSearchesIdTrips200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PlaceIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.PlaceIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.PlaceIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.PlaceIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.PlaceIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.PlaceIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOf.ModelType : Swift.Equatable {}
extension TripSearch.OrderAllOf.ModelType : Swift.Hashable {}
extension TripSearch.OrderAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.OrderAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.SelfLinkLinks.CodingKeys : Swift.Equatable {}
extension TripSearch.SelfLinkLinks.CodingKeys : Swift.Hashable {}
extension TripSearch.SelfLinkLinks.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionPenaltyPrice.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionPenaltyPrice.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionPenaltyPrice.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.JourneyIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.JourneyIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.JourneyIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.JourneyIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.JourneyIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.JourneyIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetUsersMePreferences200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetUsersMePreferences200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetUsersMePreferences200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UpdatePreferenceAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.UpdatePreferenceAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.UpdatePreferenceAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostGuestsRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostGuestsRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostGuestsRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PlaceRelationshipsTypes.CodingKeys : Swift.Equatable {}
extension TripSearch.PlaceRelationshipsTypes.CodingKeys : Swift.Hashable {}
extension TripSearch.PlaceRelationshipsTypes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LoyaltyProgram.ModelType : Swift.Equatable {}
extension TripSearch.LoyaltyProgram.ModelType : Swift.Hashable {}
extension TripSearch.LoyaltyProgram.ModelType : Swift.RawRepresentable {}
extension TripSearch.LoyaltyProgram.CodingKeys : Swift.Equatable {}
extension TripSearch.LoyaltyProgram.CodingKeys : Swift.Hashable {}
extension TripSearch.LoyaltyProgram.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PatchUsersMeRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PatchUsersMeRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PatchUsersMeRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.ErrorSource.CodingKeys : Swift.Equatable {}
extension TripSearch.ErrorSource.CodingKeys : Swift.Hashable {}
extension TripSearch.ErrorSource.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferSegmentLeg.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferSegmentLeg.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferSegmentLeg.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PreferenceAttributes.ModelType : Swift.Equatable {}
extension TripSearch.PreferenceAttributes.ModelType : Swift.Hashable {}
extension TripSearch.PreferenceAttributes.ModelType : Swift.RawRepresentable {}
extension TripSearch.VerificationCodeAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.VerificationCodeAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.VerificationCodeAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LegAllOf.ModelType : Swift.Equatable {}
extension TripSearch.LegAllOf.ModelType : Swift.Hashable {}
extension TripSearch.LegAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.LegAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.LegAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.LegAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PassengerTitleAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.PassengerTitleAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.PassengerTitleAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetailsAllOfAttributesSequences.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetailsAllOfAttributesSequences.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetailsAllOfAttributesSequences.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetails.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetails.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetails.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionDetails.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionDetails.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionDetails.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferSearch.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferSearch.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferSearch.ModelType : Swift.RawRepresentable {}
extension TripSearch.Place.ModelType : Swift.Equatable {}
extension TripSearch.Place.ModelType : Swift.Hashable {}
extension TripSearch.Place.ModelType : Swift.RawRepresentable {}
extension TripSearch.Place.CodingKeys : Swift.Equatable {}
extension TripSearch.Place.CodingKeys : Swift.Hashable {}
extension TripSearch.Place.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.Leg.ModelType : Swift.Equatable {}
extension TripSearch.Leg.ModelType : Swift.Hashable {}
extension TripSearch.Leg.ModelType : Swift.RawRepresentable {}
extension TripSearch.PostUsersSessionsRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostUsersSessionsRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostUsersSessionsRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferSegmentDetailRule.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferSegmentDetailRule.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferSegmentDetailRule.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderPassengerTravelerDocument.DocumentType : Swift.Equatable {}
extension TripSearch.OrderPassengerTravelerDocument.DocumentType : Swift.Hashable {}
extension TripSearch.OrderPassengerTravelerDocument.DocumentType : Swift.RawRepresentable {}
extension TripSearch.OrderPassengerTravelerDocument.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderPassengerTravelerDocument.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderPassengerTravelerDocument.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetailsAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetailsAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetailsAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferSearchAllOf.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferSearchAllOf.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferSearchAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferSearchAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferSearchAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferSearchAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetailsAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetailsAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetailsIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetailsIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetailsIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripOfferGroupDetailsIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferGroupDetailsIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferGroupDetailsIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OfferGroupIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.OfferGroupIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.OfferGroupIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.OfferGroupIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.OfferGroupIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.OfferGroupIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetLoyaltyPrograms200Response.CodingKeys : Swift.Equatable {}
extension TripSearch.GetLoyaltyPrograms200Response.CodingKeys : Swift.Hashable {}
extension TripSearch.GetLoyaltyPrograms200Response.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripCandidateSearch.ModelType : Swift.Equatable {}
extension TripSearch.TripCandidateSearch.ModelType : Swift.Hashable {}
extension TripSearch.TripCandidateSearch.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetails.ModelType : Swift.Equatable {}
extension TripSearch.TripBookingDetails.ModelType : Swift.Hashable {}
extension TripSearch.TripBookingDetails.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetails.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetails.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetails.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PaymentIntent.ModelType : Swift.Equatable {}
extension TripSearch.PaymentIntent.ModelType : Swift.Hashable {}
extension TripSearch.PaymentIntent.ModelType : Swift.RawRepresentable {}
extension TripSearch.SegmentAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.SegmentAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.SegmentAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.ModelType : Swift.Equatable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.ModelType : Swift.Hashable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.ModelType : Swift.RawRepresentable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.CodingKeys : Swift.Equatable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.CodingKeys : Swift.Hashable {}
extension TripSearch.GetTripsSearchesIdTrips200ResponseAllOf1IncludedInner.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingAllOfRelationshipsStatus.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingAllOfRelationshipsStatus.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingAllOfRelationshipsStatus.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsBooking.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsBooking.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingDetailsAllOfRelationshipsBooking.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LoyaltyProgramUserProfile.CodingKeys : Swift.Equatable {}
extension TripSearch.LoyaltyProgramUserProfile.CodingKeys : Swift.Hashable {}
extension TripSearch.LoyaltyProgramUserProfile.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetOffersSearchesId200ResponseIncludedInner.ModelType : Swift.Equatable {}
extension TripSearch.GetOffersSearchesId200ResponseIncludedInner.ModelType : Swift.Hashable {}
extension TripSearch.GetOffersSearchesId200ResponseIncludedInner.ModelType : Swift.RawRepresentable {}
extension TripSearch.GetOffersSearchesId200ResponseIncludedInner.CodingKeys : Swift.Equatable {}
extension TripSearch.GetOffersSearchesId200ResponseIncludedInner.CodingKeys : Swift.Hashable {}
extension TripSearch.GetOffersSearchesId200ResponseIncludedInner.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.ContactDetails.CodingKeys : Swift.Equatable {}
extension TripSearch.ContactDetails.CodingKeys : Swift.Hashable {}
extension TripSearch.ContactDetails.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.CabinClass.ModelType : Swift.Equatable {}
extension TripSearch.CabinClass.ModelType : Swift.Hashable {}
extension TripSearch.CabinClass.ModelType : Swift.RawRepresentable {}
extension TripSearch.CabinClass.CodingKeys : Swift.Equatable {}
extension TripSearch.CabinClass.CodingKeys : Swift.Hashable {}
extension TripSearch.CabinClass.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.UserData.ModelType : Swift.Equatable {}
extension TripSearch.UserData.ModelType : Swift.Hashable {}
extension TripSearch.UserData.ModelType : Swift.RawRepresentable {}
extension TripSearch.UserData.CodingKeys : Swift.Equatable {}
extension TripSearch.UserData.CodingKeys : Swift.Hashable {}
extension TripSearch.UserData.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LegIdentifier.ModelType : Swift.Equatable {}
extension TripSearch.LegIdentifier.ModelType : Swift.Hashable {}
extension TripSearch.LegIdentifier.ModelType : Swift.RawRepresentable {}
extension TripSearch.LegIdentifier.CodingKeys : Swift.Equatable {}
extension TripSearch.LegIdentifier.CodingKeys : Swift.Hashable {}
extension TripSearch.LegIdentifier.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GuestSessionRelationshipsGuestData.ModelType : Swift.Equatable {}
extension TripSearch.GuestSessionRelationshipsGuestData.ModelType : Swift.Hashable {}
extension TripSearch.GuestSessionRelationshipsGuestData.ModelType : Swift.RawRepresentable {}
extension TripSearch.GuestSessionRelationshipsGuestData.CodingKeys : Swift.Equatable {}
extension TripSearch.GuestSessionRelationshipsGuestData.CodingKeys : Swift.Hashable {}
extension TripSearch.GuestSessionRelationshipsGuestData.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetLoyaltyPrograms200ResponseAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.GetLoyaltyPrograms200ResponseAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.GetLoyaltyPrograms200ResponseAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderMessage.ModelType : Swift.Equatable {}
extension TripSearch.OrderMessage.ModelType : Swift.Hashable {}
extension TripSearch.OrderMessage.ModelType : Swift.RawRepresentable {}
extension TripSearch.OrderMessage.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderMessage.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderMessage.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.GetHealth200ResponseMeta.Status : Swift.Equatable {}
extension TripSearch.GetHealth200ResponseMeta.Status : Swift.Hashable {}
extension TripSearch.GetHealth200ResponseMeta.Status : Swift.RawRepresentable {}
extension TripSearch.GetHealth200ResponseMeta.CodingKeys : Swift.Equatable {}
extension TripSearch.GetHealth200ResponseMeta.CodingKeys : Swift.Hashable {}
extension TripSearch.GetHealth200ResponseMeta.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionPenalty.PenaltyType : Swift.Equatable {}
extension TripSearch.TripOfferOptionPenalty.PenaltyType : Swift.Hashable {}
extension TripSearch.TripOfferOptionPenalty.PenaltyType : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionPenalty.Applicability : Swift.Equatable {}
extension TripSearch.TripOfferOptionPenalty.Applicability : Swift.Hashable {}
extension TripSearch.TripOfferOptionPenalty.Applicability : Swift.RawRepresentable {}
extension TripSearch.TripOfferOptionPenalty.CodingKeys : Swift.Equatable {}
extension TripSearch.TripOfferOptionPenalty.CodingKeys : Swift.Hashable {}
extension TripSearch.TripOfferOptionPenalty.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripSearchAllOfRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.TripSearchAllOfRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.TripSearchAllOfRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.TripBookingAllOf.ModelType : Swift.Equatable {}
extension TripSearch.TripBookingAllOf.ModelType : Swift.Hashable {}
extension TripSearch.TripBookingAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.TripBookingAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.TripBookingAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.TripBookingAllOf.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.LegTypeAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.LegTypeAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.LegTypeAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.NextLink.CodingKeys : Swift.Equatable {}
extension TripSearch.NextLink.CodingKeys : Swift.Hashable {}
extension TripSearch.NextLink.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PlaceRelationships.CodingKeys : Swift.Equatable {}
extension TripSearch.PlaceRelationships.CodingKeys : Swift.Hashable {}
extension TripSearch.PlaceRelationships.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.OrderAllOfAttributes.CodingKeys : Swift.Equatable {}
extension TripSearch.OrderAllOfAttributes.CodingKeys : Swift.Hashable {}
extension TripSearch.OrderAllOfAttributes.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PassengerGender.ModelType : Swift.Equatable {}
extension TripSearch.PassengerGender.ModelType : Swift.Hashable {}
extension TripSearch.PassengerGender.ModelType : Swift.RawRepresentable {}
extension TripSearch.PassengerGender.CodingKeys : Swift.Equatable {}
extension TripSearch.PassengerGender.CodingKeys : Swift.Hashable {}
extension TripSearch.PassengerGender.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.PostOffersSearchesRequest.CodingKeys : Swift.Equatable {}
extension TripSearch.PostOffersSearchesRequest.CodingKeys : Swift.Hashable {}
extension TripSearch.PostOffersSearchesRequest.CodingKeys : Swift.RawRepresentable {}
extension TripSearch.JourneyAllOf.ModelType : Swift.Equatable {}
extension TripSearch.JourneyAllOf.ModelType : Swift.Hashable {}
extension TripSearch.JourneyAllOf.ModelType : Swift.RawRepresentable {}
extension TripSearch.JourneyAllOf.CodingKeys : Swift.Equatable {}
extension TripSearch.JourneyAllOf.CodingKeys : Swift.Hashable {}
extension TripSearch.JourneyAllOf.CodingKeys : Swift.RawRepresentable {}
